# -*- coding: utf-8 -*-
# Generated by Django 1.10.1 on 2016-10-27 04:13
from __future__ import unicode_literals

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
import django_crypto_fields.fields.encrypted_char_field
import django_crypto_fields.fields.encrypted_text_field
import django_crypto_fields.fields.firstname_field
import django_crypto_fields.fields.identity_field
import django_crypto_fields.fields.lastname_field
import django_crypto_fields.mixins
import django_extensions.db.fields
import django_revision.revision_field
import edc_base.model.fields.custom_fields
import edc_base.model.fields.hostname_modification_field
import edc_base.model.fields.userfield
import edc_base.model.fields.uuid_auto_field
import edc_base.model.validators.date
import edc_consent.validators
import edc_protocol.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AdherenceCounselling',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('dashboard_comment', models.CharField(editable=False, max_length=50, null=True)),
                ('adherence_date', models.DateField(blank=True, null=True, verbose_name='Date of Adherence Counseling')),
                ('adherence_partner', models.CharField(blank=True, choices=[('mother', 'Mother'), ('father', 'Father'), ('grandmother', 'Grandmother'), ('grandfather', 'Grandfather'), ('aunt', 'Aunt'), ('uncle', 'Uncle'), ('sister', 'Sister'), ('legal_guardian', 'Legal Guardian'), ('not_applicable', 'Not Applicable'), ('OTHER', 'Other, specify')], max_length=25, null=True, verbose_name='Relationship of Adherence Partner to Individual')),
                ('adherence_partner_other', models.CharField(blank=True, max_length=25, null=True, verbose_name='adherence partner: "Other"')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('subject_identifier', models.CharField(editable=False, max_length=50, verbose_name='Subject Identifier')),
                ('timepoint_status', models.CharField(choices=[('open', 'Open'), ('feedback', 'Feedback'), ('closed', 'Closed')], default='open', max_length=15)),
                ('timepoint_opened_datetime', models.DateTimeField(editable=False, help_text="the original calculated model's datetime, updated in the signal", null=True)),
                ('timepoint_closed_datetime', models.DateTimeField(editable=False, null=True)),
                ('visit_schedule_name', models.CharField(help_text='the name of the visit schedule used to find the "schedule"', max_length=25, null=True)),
                ('schedule_name', models.CharField(help_text='the name of the schedule used to find the list of "visits" to create appointments', max_length=25, null=True)),
                ('visit_code', models.CharField(max_length=25, null=True)),
                ('best_appt_datetime', models.DateTimeField(editable=False, null=True)),
                ('appt_close_datetime', models.DateTimeField(editable=False, null=True)),
                ('visit_instance', models.CharField(blank=True, db_index=True, default='0', help_text='A decimal to represent an additional report to be included with the original visit report. (NNNN.0)', max_length=1, null=True, validators=[django.core.validators.RegexValidator('[0-9]', 'Must be a number from 0-9')], verbose_name='Instance')),
                ('visit_code_sequence', models.IntegerField(blank=True, default=0, help_text='An integer to represent the sequence of additional appointments relative to the base appointment, 0, needed to complete data collection for the timepoint. (NNNN.0)', null=True, verbose_name='Sequence')),
                ('appt_datetime', models.DateTimeField(db_index=True, verbose_name='Appointment date and time')),
                ('appt_type', models.CharField(choices=[('clinic', 'In clinic'), ('telephone', 'By telephone'), ('home', 'At home')], default='clinic', help_text='Default for subject may be edited Subject Configuration.', max_length=20, verbose_name='Appointment type')),
                ('appt_status', models.CharField(choices=[('new', 'New'), ('in_progress', 'In Progress'), ('incomplete', 'Incomplete'), ('done', 'Done'), ('cancelled', 'Cancelled')], db_index=True, default='new', max_length=25, verbose_name='Status')),
                ('appt_reason', models.CharField(blank=True, help_text='Reason for appointment', max_length=25, verbose_name='Reason for appointment')),
                ('comment', models.CharField(blank=True, max_length=250, verbose_name='Comment')),
                ('is_confirmed', models.BooleanField(default=False, editable=False)),
            ],
        ),
        migrations.CreateModel(
            name='ArtRecord',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('dashboard_comment', models.CharField(editable=False, max_length=50, null=True)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('comment', models.TextField(blank=True, max_length=250, null=True)),
            ],
            options={
                'verbose_name': 'ART Record',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ArtRegimen',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Use 3 letter abbrev separated by commas.', max_length=25)),
                ('regimen', models.CharField(editable=False, max_length=25, null=True)),
                ('date_started', models.DateField()),
                ('date_stopped', models.DateField(blank=True, null=True)),
                ('is_ongoing', models.BooleanField(default=False)),
                ('reason_ended', models.CharField(choices=[('REASON1', 'Reason 1'), ('REASON2', 'Reason 2'), ('REASON3', 'Reason 3'), ('OTHER', 'Other, specify ...')], max_length=50)),
                ('reason_ended_other', models.TextField(blank=True, max_length=50, null=True)),
                ('art_record', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ba_namotswe.ArtRecord')),
            ],
            options={
                'verbose_name': 'ART Regimen',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CrfMetadata',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(editable=False, max_length=50, verbose_name='Subject Identifier')),
                ('visit_schedule_name', models.CharField(max_length=25)),
                ('schedule_name', models.CharField(max_length=25)),
                ('visit_code', models.CharField(max_length=25)),
                ('model', models.CharField(max_length=50)),
                ('current_entry_title', models.CharField(max_length=250, null=True)),
                ('show_order', models.IntegerField()),
                ('entry_status', models.CharField(choices=[('REQUIRED', 'New'), ('KEYED', 'Keyed'), ('MISSED', 'Missed'), ('NOT_REQUIRED', 'Not required')], db_index=True, default='REQUIRED', max_length=25)),
                ('due_datetime', models.DateTimeField(blank=True, null=True)),
                ('report_datetime', models.DateTimeField(blank=True, null=True)),
                ('entry_comment', models.TextField(blank=True, max_length=250, null=True)),
                ('close_datetime', models.DateTimeField(blank=True, null=True)),
                ('fill_datetime', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Crf Metadata',
                'verbose_name': 'Crf Metadata',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Death',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('dashboard_comment', models.CharField(editable=False, max_length=50, null=True)),
                ('dod', models.DateField(blank=True, null=True, verbose_name='Date of Death')),
                ('death_cause', models.CharField(blank=True, max_length=25, null=True, verbose_name='Cause of Death')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Enrollment',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(editable=False, max_length=50, verbose_name='Subject Identifier')),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('study_site', models.CharField(default='10', editable=False, max_length=10)),
                ('slh_identifier', models.CharField(max_length=25, unique=True, verbose_name='SLH Number')),
                ('cm_identifier', models.CharField(blank=True, help_text='Provide if available.', max_length=25, null=True, verbose_name='CM Number')),
                ('initials', models.CharField(blank=True, max_length=3, null=True)),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=1, verbose_name='Gender')),
                ('dob', models.DateField(help_text='Format is YYYY-MM-DD', verbose_name='Date of birth')),
                ('age_at_entry', models.IntegerField(editable=False, null=True)),
                ('caregiver_relation', models.CharField(blank=True, choices=[('mother', 'Mother'), ('father', 'Father'), ('grandmother', 'Grandmother'), ('grandfather', 'Grandfather'), ('aunt', 'Aunt'), ('uncle', 'Uncle'), ('sister', 'Sister'), ('legal_guardian', 'Legal Guardian'), ('not_applicable', 'Not Applicable'), ('OTHER', 'Other, specify')], help_text='Required if 10-13 years old, otherwise leave blank.', max_length=25, null=True, verbose_name='Caregiver/Next of Kin Relationship')),
                ('caregiver_relation_other', models.CharField(blank=True, max_length=25, null=True, verbose_name='Caregiver/Next of Kin Relationship: "Other"')),
            ],
            options={
                'verbose_name': 'Enrollment',
            },
        ),
        migrations.CreateModel(
            name='EntryToCare',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('dashboard_comment', models.CharField(editable=False, max_length=50, null=True)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('entry_date', models.DateField(validators=[edc_base.model.validators.date.date_not_future], verbose_name='Date of Initial Clinic Visit / Entry into care')),
                ('entry_weight', models.DecimalField(blank=True, decimal_places=2, help_text='Provide if available.', max_digits=5, null=True, verbose_name='Weight at entry (kg)')),
                ('entry_height', models.DecimalField(blank=True, decimal_places=2, help_text='Provide if available.', max_digits=5, null=True, verbose_name='Height at entry (cm)')),
                ('hiv_dx_date', models.DateField(help_text='Provide if available.', validators=[edc_base.model.validators.date.date_not_future], verbose_name='HIV Diagnosis Date ')),
                ('hiv_dx_date_estimated', models.BooleanField(default=False, editable=False, help_text='If True, using entry date as HIV diagnosis date.')),
                ('art_init_date', models.DateField(help_text='Provide if available.', validators=[edc_base.model.validators.date.date_not_future], verbose_name='ART Initiation Date')),
                ('phiv', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Unknown', 'Unknown')], max_length=15, verbose_name='Is this an individual who was perinatally infected? (Dx. Prior to 10 years of age)')),
                ('art_preg', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Unknown', 'Unknown')], max_length=15, verbose_name='Did the mother of the individual receive antiretrovirals during pregnancy?')),
                ('art_preg_type', models.CharField(blank=True, choices=[('AZT', 'AZT Monotherapy'), ('sdNVP', 'Single-dose NVP'), ('AZT-sdNVP', 'AZT and dsNVP'), ('tripleARV', 'triple ARV'), ('OTHER', 'Other, please specify')], max_length=25, null=True, verbose_name='Please specify maternal antiretrovirals received during pregnancy:')),
                ('art_preg_type_other', models.CharField(blank=True, max_length=25, null=True, verbose_name='If other maternal antiretrovirals received during pregnancy, please specify:')),
                ('infant_ppx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Unknown', 'Unknown')], max_length=15, verbose_name='Did the individual receive infant prophylaxis in the 1st month of life?')),
                ('infant_ppx_type', models.CharField(choices=[('sdNVP', 'Single-dose NVP'), ('AZT', 'AZT Monotherapy'), ('AZT-sdNVP', 'AZT and dsNVP'), ('extNVP', 'Extended NVP')], max_length=25, verbose_name='Please specify type of infant prophylaxis in the 1st month of life:')),
                ('comment', models.TextField(blank=True, help_text='DO NOT include any information that could be used to identify the patient.', max_length=150, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ExtractionChecklist',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('dashboard_comment', models.CharField(editable=False, max_length=50, null=True)),
                ('arv_changes', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Unknown', 'Unknown')], default='unknown', max_length=20, verbose_name='Has the patient had an changes to his/her ARV regimen since previous visit?')),
                ('tb_diagnosis', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Unknown', 'Unknown')], default='unknown', max_length=20, verbose_name='Has the patient been diagnosed with TB since the last visit?')),
                ('oi_diagnosis', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Unknown', 'Unknown')], default='unknown', max_length=20, verbose_name='Has the patient been diagnosed with any new opportunistic infections since the last visit?')),
                ('assessment_history', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Unknown', 'Unknown')], default='unknown', max_length=20, verbose_name='Has there been any assessment history for the patient?')),
                ('extraction', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Unknown', 'Unknown')], default='unknown', max_length=20, verbose_name='Data extraction')),
                ('preg_diagnosis', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Unknown', 'Unknown')], default='unknown', max_length=20, verbose_name='Has this patient been diagnosed with a new pregnancy since the last visit?')),
                ('counselling_adhere', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Unknown', 'Unknown')], default='unknown', max_length=20, verbose_name='Was there any adherence counseling performed at this visit?')),
                ('transfer', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Unknown', 'Unknown')], default='unknown', max_length=20, verbose_name='Has this patient been transferred in or out of the clinic since the last visit?')),
                ('treatment', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Unknown', 'Unknown')], default='unknown', max_length=20, verbose_name='Does the patient have any treatment history?')),
                ('death', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Unknown', 'Unknown')], default='unknown', max_length=20, verbose_name='Has this patient died since the last visit?')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HistoricalSubjectConsent',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('first_name', django_crypto_fields.fields.firstname_field.FirstnameField(help_text=' (Encryption: RSA local)', max_length=71, null=True)),
                ('last_name', django_crypto_fields.fields.lastname_field.LastnameField(help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Last name')),
                ('initials', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[django.core.validators.RegexValidator(message='Ensure initials consist of letters only in upper case, no spaces.', regex='^[A-Z]{2,3}$')])),
                ('dob', models.DateField(help_text='Format is YYYY-MM-DD', null=True, verbose_name='Date of birth')),
                ('is_dob_estimated', edc_base.model.fields.custom_fields.IsDateEstimatedField(choices=[('-', 'No'), ('D', 'Yes, estimated the Day'), ('MD', 'Yes, estimated Month and Day'), ('YMD', 'Yes, estimated Year, Month and Day')], help_text='If the exact date is not known, please indicate which part of the date is estimated.', max_length=25, null=True, verbose_name='Is date of birth estimated?')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('U', 'Undetermined')], max_length=1, null=True, verbose_name='Gender')),
                ('guardian_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if subject is a minor. Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma then followe by a space. (Encryption: RSA local)", max_length=71, null=True, validators=[edc_consent.validators.FullNameValidator()], verbose_name="Guardian's Last and first name (minors only)")),
                ('subject_type', models.CharField(max_length=25)),
                ('is_verified', models.BooleanField(default=False, editable=False)),
                ('is_verified_datetime', models.DateTimeField(editable=False, null=True)),
                ('verified_by', models.CharField(editable=False, max_length=25, null=True)),
                ('subject_identifier', models.CharField(blank=True, max_length=50, verbose_name='Subject Identifier')),
                ('subject_identifier_as_pk', models.CharField(default=None, editable=False, max_length=50, verbose_name='Subject Identifier as pk')),
                ('subject_identifier_aka', models.CharField(editable=False, help_text='track a previously allocated identifier.', max_length=50, null=True, verbose_name='Subject Identifier a.k.a')),
                ('consent_datetime', models.DateTimeField(validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model.validators.date.datetime_not_future], verbose_name='Consent date and time')),
                ('version', models.CharField(default='?', editable=False, help_text="See 'Consent Type' for consent versions by period.", max_length=10, verbose_name='Consent version')),
                ('study_site', models.CharField(max_length=15, null=True)),
                ('sid', models.CharField(blank=True, help_text='Used for randomization against a prepared rando-list.', max_length=15, null=True, verbose_name='SID')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=250, null=True, verbose_name='Comment')),
                ('dm_comment', models.CharField(editable=False, help_text='see also edc.data manager.', max_length=150, null=True, verbose_name='Data Management comment')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical subject consent',
                'get_latest_by': 'history_date',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='LabRecord',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('dashboard_comment', models.CharField(editable=False, max_length=50, null=True)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LabTest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('utest_id', models.CharField(choices=[('CD4', 'CD4 absolute'), ('CD4_perc', 'CD4 percentage'), ('VL', 'Viral Load')], max_length=25, verbose_name='Test')),
                ('test_date', models.DateField(validators=[edc_base.model.validators.date.date_not_future])),
                ('quantifier', models.CharField(choices=[('<', '<'), ('<=', '<='), ('=', '= EQUALS'), ('>=', '>='), ('>', '>')], default='=', max_length=3, verbose_name='quantifier')),
                ('value', models.CharField(max_length=10)),
                ('units', models.CharField(choices=[('%', '%'), ('10^3/uL', '10^3/uL'), ('10^3uL', '10^3uL'), ('10^6/uL', '10^6/uL'), ('cells/ul', 'cells/ul'), ('copies/ml', 'copies/ml'), ('fL', 'fL'), ('g/dL', 'g/dL'), ('g/L', 'g/L'), ('mg/L', 'mg/L'), ('mm/H', 'mm/H'), ('mmol/L', 'mmol/L'), ('ng/ml', 'ng/ml'), ('pg', 'pg'), ('ratio', 'ratio'), ('U/L', 'U/L'), ('umol/L', 'umol/L')], max_length=10)),
                ('lab_record', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ba_namotswe.LabRecord')),
            ],
        ),
        migrations.CreateModel(
            name='Oi',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('oi_type', models.CharField(choices=[('CANDIDIASIS_OF_BRONCHI_TRACHEA_ESOPHAGUS_OR_LUNGS', 'Candidiasis of bronchi, trachea, esophagus, or lungs'), ('INVASIVE_CERVICAL_CANCER', 'Invasive cervical cancer'), ('COCCIDIOIDOMYCOSIS', 'Coccidioidomycosis'), ('CRYPTOCOCCOSIS', 'Cryptococcosis'), ('CRYPTOSPORIDIOSIS_CHRONIC_INTESTINAL_GREATER_THAN_1_MONTH_DURATION', 'Cryptosporidiosis, chronic intestinal (greater than 1 months duration)'), ('ENCEPHALOPHALOPAHY_HIV_RELATED', 'Encephalopathy, HIV-related'), ('HERPES_SIMPLEX', 'Herpes simplex: chronic ulcer(s) (greater than 1 month duration); or bronchitis, pneumonitis, or esophagitis'), ('HISTOPLASMOSIS', 'Histoplasmosis'), ('ISOSPORIASIS_CHRONIC_INTESTINAL_GREATER_THAN_1_MONTH_DURATION', 'Isosporiasis, chronic intestinal (greater than 1 months duration)'), ('KAPOSI_SARCOMA', "Kaposi's sarcoma"), ('LYMPHOMA', 'Lymphoma, multiple forms'), ('MYCOBACTERIUM_AVIUM_COMPLEX', 'Mycobacterium avium complex'), ('TUBERCULOSIS', 'Tuberculosis'), ('PNEUMOCYSTIS_JIROVECI_PNEUMONIA', 'Pneumocystis jiroveci pneumonia (PJP)'), ('PNEUMONIA_RECURRENT', 'Pneumonia, recurrent'), ('PROGRESSIVE_MULTILOCAL_LEUKOENCEPHALOPATHY', 'Progressive multifocal leukoencephalopathy'), ('SALMONELLA_SEPTICEMIA_RECURRENT', 'Salmonella septicemia, recurrent'), ('TOXOPLASMOSIS_OF_BRAIN', 'Toxoplasmosis of brain'), ('WASTING_SYNDROME_DUE_TO_HIV', 'Wasting syndrome due to HIV')], max_length=200)),
                ('start_date', models.DateField()),
                ('stop_date', models.DateField(blank=True, null=True)),
                ('is_ongoing', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OiRecord',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('dashboard_comment', models.CharField(editable=False, max_length=50, null=True)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('comment', models.TextField(blank=True, max_length=250, null=True)),
            ],
            options={
                'verbose_name': 'Opportunistic Infection',
                'verbose_name_plural': 'Opportunistic Infections',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PackingList',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('list_datetime', models.DateTimeField()),
                ('list_comment', models.CharField(blank=True, max_length=100, null=True, verbose_name='Instructions')),
                ('list_items', models.TextField(help_text="List specimen_identifier's. One per line.", max_length=1000)),
                ('timestamp', models.CharField(max_length=35, null=True)),
                ('received', models.BooleanField(default=False, editable=False, help_text='Shipped items are all received at destination')),
            ],
            options={
                'verbose_name': 'Packing List',
            },
        ),
        migrations.CreateModel(
            name='Pregnancy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pregnancy_date', models.DateField(verbose_name='Date of first clinical documentation of pregnancy')),
                ('delivery_date', models.DateField()),
            ],
            options={
                'verbose_name': 'Pregnancy',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PregnancyHistory',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('dashboard_comment', models.CharField(editable=False, max_length=50, null=True)),
            ],
            options={
                'verbose_name': 'Pregnancy History',
                'verbose_name_plural': 'Pregnancy History',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RegisteredSubject',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(editable=False, max_length=50, unique=True, verbose_name='Subject Identifier')),
                ('subject_identifier_as_pk', models.CharField(editable=False, max_length=50, verbose_name='Subject Identifier as pk')),
                ('subject_identifier_aka', models.CharField(editable=False, help_text='track a previously allocated identifier.', max_length=50, null=True, verbose_name='Subject Identifier a.k.a')),
                ('first_name', django_crypto_fields.fields.firstname_field.FirstnameField(help_text=' (Encryption: RSA local)', max_length=71, null=True)),
                ('last_name', django_crypto_fields.fields.lastname_field.LastnameField(help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Last name')),
                ('initials', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[django.core.validators.RegexValidator(message='Ensure initials consist of letters only in upper case, no spaces.', regex='^[A-Z]{2,3}$')])),
                ('dob', models.DateField(help_text='Format is YYYY-MM-DD', null=True, verbose_name='Date of birth')),
                ('is_dob_estimated', edc_base.model.fields.custom_fields.IsDateEstimatedField(choices=[('-', 'No'), ('D', 'Yes, estimated the Day'), ('MD', 'Yes, estimated Month and Day'), ('YMD', 'Yes, estimated Year, Month and Day')], help_text='If the exact date is not known, please indicate which part of the date is estimated.', max_length=25, null=True, verbose_name='Is date of birth estimated?')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=1, null=True, verbose_name='Gender')),
                ('subject_consent_id', models.CharField(blank=True, max_length=100, null=True)),
                ('registration_identifier', models.CharField(blank=True, max_length=36, null=True)),
                ('sid', models.CharField(blank=True, max_length=15, null=True, verbose_name='SID')),
                ('study_site', models.CharField(blank=True, max_length=50, null=True)),
                ('relative_identifier', models.CharField(blank=True, help_text="For example, mother's identifier, if available / appropriate", max_length=25, null=True, verbose_name='Identifier of immediate relation')),
                ('identity', django_crypto_fields.fields.identity_field.IdentityField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True)),
                ('identity_type', edc_base.model.fields.custom_fields.IdentityTypeField(blank=True, choices=[('OMANG', 'Omang'), ('DRIVERS', "Driver's License"), ('PASSPORT', 'Passport'), ('OMANG_RCPT', 'Omang Receipt'), ('OTHER', 'Other')], max_length=15, null=True, verbose_name='What type of identity number is this?')),
                ('screening_identifier', models.CharField(blank=True, max_length=36, null=True)),
                ('screening_datetime', models.DateTimeField(blank=True, null=True)),
                ('screening_age_in_years', models.IntegerField(blank=True, null=True)),
                ('registration_datetime', models.DateTimeField(blank=True, null=True)),
                ('randomization_datetime', models.DateTimeField(blank=True, null=True)),
                ('registration_status', models.CharField(blank=True, max_length=25, null=True, verbose_name='Registration status')),
                ('comment', models.TextField(blank=True, max_length=250, null=True, verbose_name='Comment')),
                ('additional_key', models.CharField(default=None, editable=False, help_text='A uuid (or some other text value) to be added to bypass the unique constraint of just firstname, initials, and dob.The default constraint proves limiting since the source model usually has some otherattribute in additional to first_name, initials and dob which is not captured in this model', max_length=36, null=True, verbose_name='-')),
                ('dm_comment', models.CharField(editable=False, max_length=150, null=True, verbose_name='Data Management comment')),
            ],
        ),
        migrations.CreateModel(
            name='RequisitionMetadata',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(editable=False, max_length=50, verbose_name='Subject Identifier')),
                ('visit_schedule_name', models.CharField(max_length=25)),
                ('schedule_name', models.CharField(max_length=25)),
                ('visit_code', models.CharField(max_length=25)),
                ('model', models.CharField(max_length=50)),
                ('current_entry_title', models.CharField(max_length=250, null=True)),
                ('show_order', models.IntegerField()),
                ('entry_status', models.CharField(choices=[('REQUIRED', 'New'), ('KEYED', 'Keyed'), ('MISSED', 'Missed'), ('NOT_REQUIRED', 'Not required')], db_index=True, default='REQUIRED', max_length=25)),
                ('due_datetime', models.DateTimeField(blank=True, null=True)),
                ('report_datetime', models.DateTimeField(blank=True, null=True)),
                ('entry_comment', models.TextField(blank=True, max_length=250, null=True)),
                ('close_datetime', models.DateTimeField(blank=True, null=True)),
                ('fill_datetime', models.DateTimeField(blank=True, null=True)),
                ('panel_name', models.CharField(max_length=50, null=True)),
            ],
            options={
                'verbose_name_plural': 'Requisition Metadata',
                'verbose_name': 'Requisition Metadata',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SubjectConsent',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('first_name', django_crypto_fields.fields.firstname_field.FirstnameField(help_text=' (Encryption: RSA local)', max_length=71, null=True)),
                ('last_name', django_crypto_fields.fields.lastname_field.LastnameField(help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Last name')),
                ('initials', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[django.core.validators.RegexValidator(message='Ensure initials consist of letters only in upper case, no spaces.', regex='^[A-Z]{2,3}$')])),
                ('dob', models.DateField(help_text='Format is YYYY-MM-DD', null=True, verbose_name='Date of birth')),
                ('is_dob_estimated', edc_base.model.fields.custom_fields.IsDateEstimatedField(choices=[('-', 'No'), ('D', 'Yes, estimated the Day'), ('MD', 'Yes, estimated Month and Day'), ('YMD', 'Yes, estimated Year, Month and Day')], help_text='If the exact date is not known, please indicate which part of the date is estimated.', max_length=25, null=True, verbose_name='Is date of birth estimated?')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('U', 'Undetermined')], max_length=1, null=True, verbose_name='Gender')),
                ('guardian_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if subject is a minor. Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma then followe by a space. (Encryption: RSA local)", max_length=71, null=True, validators=[edc_consent.validators.FullNameValidator()], verbose_name="Guardian's Last and first name (minors only)")),
                ('subject_type', models.CharField(max_length=25)),
                ('is_verified', models.BooleanField(default=False, editable=False)),
                ('is_verified_datetime', models.DateTimeField(editable=False, null=True)),
                ('verified_by', models.CharField(editable=False, max_length=25, null=True)),
                ('subject_identifier', models.CharField(blank=True, max_length=50, verbose_name='Subject Identifier')),
                ('subject_identifier_as_pk', models.CharField(default=None, editable=False, max_length=50, verbose_name='Subject Identifier as pk')),
                ('subject_identifier_aka', models.CharField(editable=False, help_text='track a previously allocated identifier.', max_length=50, null=True, verbose_name='Subject Identifier a.k.a')),
                ('consent_datetime', models.DateTimeField(validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model.validators.date.datetime_not_future], verbose_name='Consent date and time')),
                ('version', models.CharField(default='?', editable=False, help_text="See 'Consent Type' for consent versions by period.", max_length=10, verbose_name='Consent version')),
                ('study_site', models.CharField(max_length=15, null=True)),
                ('sid', models.CharField(blank=True, help_text='Used for randomization against a prepared rando-list.', max_length=15, null=True, verbose_name='SID')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=250, null=True, verbose_name='Comment')),
                ('dm_comment', models.CharField(editable=False, help_text='see also edc.data manager.', max_length=150, null=True, verbose_name='Data Management comment')),
            ],
            options={
                'get_latest_by': 'consent_datetime',
                'ordering': ('created',),
            },
            bases=(django_crypto_fields.mixins.CryptoMixin, models.Model),
            managers=[
                ('consent', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='SubjectRequisition',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('dashboard_comment', models.CharField(editable=False, max_length=50, null=True)),
                ('panel_name', models.CharField(max_length=25)),
                ('requisition_identifier', models.CharField(editable=False, max_length=50, unique=True, verbose_name='Requisition Id')),
                ('requisition_datetime', models.DateTimeField(verbose_name='Requisition Date')),
                ('drawn_datetime', models.DateTimeField(blank=True, help_text='If not drawn, leave blank. Same as date and time of finger prick in case on DBS.', null=True, verbose_name='Date / Time Specimen Drawn')),
                ('is_drawn', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='Yes', help_text='If No, provide a reason below', max_length=3, verbose_name='Was a specimen drawn?')),
                ('reason_not_drawn', models.CharField(blank=True, choices=[('collection_failed', 'Tried, but unable obtaining sample from patient'), ('absent', 'Patient did not attend visit'), ('refused', 'Patient refused'), ('no_supplies', 'No supplies')], max_length=25, null=True, verbose_name='If not drawn, please explain')),
                ('specimen_identifier', models.CharField(editable=False, max_length=50, null=True, unique=True, verbose_name='Specimen Id')),
                ('study_site', models.CharField(max_length=10, null=True)),
                ('clinician_initials', edc_base.model.fields.custom_fields.InitialsField(blank=True, help_text='Type 2-3 letters, all in uppercase and no spaces', max_length=3, null=True, verbose_name='Initials')),
                ('specimen_type', models.CharField(max_length=25, verbose_name='Specimen type')),
                ('item_type', models.CharField(choices=[('tube', 'Tube'), ('swab', 'Swab'), ('dbs', 'DBS Card'), ('other', 'Other')], default='tube', max_length=25, verbose_name='Item collection type')),
                ('item_count', models.IntegerField(default=1, help_text='Number of tubes, samples, cards, etc being sent for this test/order only. Determines number of labels to print', verbose_name='Number of items')),
                ('estimated_volume', models.DecimalField(decimal_places=2, default=5.0, help_text='If applicable, estimated volume of sample for this test/order. This is the total volume if number of "tubes" above is greater than 1', max_digits=7, verbose_name='Estimated volume in mL')),
                ('comments', models.TextField(blank=True, max_length=25, null=True)),
                ('packing_list', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ba_namotswe.PackingList')),
            ],
            options={
                'verbose_name': 'Subject Requisition',
                'verbose_name_plural': 'Subject Laboratory Requisition',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SubjectVisit',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(help_text='Date and time of this report', validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model.validators.date.datetime_not_future], verbose_name='Visit Date and Time')),
                ('reason', models.CharField(help_text='<Override the field class for this model field attribute in ModelForm>', max_length=25, verbose_name='What is the reason for this visit?')),
                ('study_status', models.CharField(help_text='<Override the field class for this model field attribute in ModelForm>', max_length=50, verbose_name="What is the participant's current study status")),
                ('require_crfs', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='Yes', max_length=10, verbose_name='Are scheduled data being submitted with this visit?')),
                ('reason_missed', models.CharField(blank=True, max_length=35, null=True, verbose_name="If 'missed' above, Reason scheduled visit was missed")),
                ('info_source', models.CharField(max_length=25, verbose_name='What is the main source of this information?')),
                ('info_source_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('survival_status', models.CharField(choices=[('alive', 'Alive'), ('dead', 'Dead'), ('unknown', 'Unknown')], default='alive', max_length=10, null=True, verbose_name="Participant's survival status")),
                ('last_alive_date', models.DateField(blank=True, null=True, validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model.validators.date.date_not_future], verbose_name='Date participant last known alive')),
                ('comments', models.TextField(blank=True, max_length=250, null=True, verbose_name='Comment if any additional pertinent information about the participant')),
                ('subject_identifier', models.CharField(editable=False, help_text='updated automatically', max_length=50, verbose_name='subject_identifier')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('appointment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='ba_namotswe.Appointment')),
            ],
        ),
        migrations.CreateModel(
            name='Tb',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dx_date', models.DateField(validators=[edc_base.model.validators.date.date_not_future], verbose_name='Date of TB diagnosis')),
                ('tb_type', models.CharField(choices=[('PULMONARY TB', 'Pulmonary TB'), ('NON PULMONARY TB', 'Non pulmonary TB')], max_length=30, verbose_name='Type of TB')),
                ('dx_method', models.CharField(choices=[('CULTURE POSITIVE', 'Culture Positive'), ('CXR', 'CXR'), ('OTHER IMAGING MODALITY', 'Other Imaging Modality'), ('CLINICAL DIAGNOSIS', 'Clinical Diagnosis'), ('OTHER', 'Other, describe')], max_length=30, verbose_name='Method of TB diagnosis')),
                ('dx_method_other', models.CharField(blank=True, max_length=50, null=True, verbose_name='Method of TB diagnosis: Other')),
            ],
            options={
                'verbose_name': 'TB History',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TbRecord',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('dashboard_comment', models.CharField(editable=False, max_length=50, null=True)),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='ba_namotswe.SubjectVisit')),
            ],
            options={
                'verbose_name': 'Tuberculosis Infection History',
                'verbose_name_plural': 'Tuberculosis Infection History',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Transfer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transfer_date', models.DateField()),
                ('transferred_from', models.CharField(choices=[('idcc', 'IDCC'), ('private', 'Private Clinic'), ('bipai', 'BIPAI'), ('OTHER', 'Other, specify')], max_length=25, verbose_name='Transfered from ...')),
                ('transfer_from_other', models.CharField(blank=True, max_length=25, null=True, verbose_name='... from "Other", please specify')),
                ('transferred_to', models.CharField(choices=[('idcc', 'IDCC'), ('private', 'Private Clinic'), ('bipai', 'BIPAI'), ('OTHER', 'Other, specify')], max_length=25, verbose_name='Transfered to ...')),
                ('transfer_to_other', models.CharField(blank=True, max_length=25, null=True, verbose_name='... to "Other", please specify')),
                ('transfer_reason', models.TextField(max_length=50, verbose_name='Reason')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TransferRecord',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('dashboard_comment', models.CharField(editable=False, max_length=50, null=True)),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='ba_namotswe.SubjectVisit')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WhoDiagnosis',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dx', models.CharField(choices=[('A1', 'Asymptomatic'), ('A2', 'Persistent generalized lymphadenopathy (PGL)'), ('B010', 'Weigh loss, moderate unexplained (<10% of presumed or measured body weight)'), ('B011', 'Weight loss, severe (>10% of presumed or measured body weight)'), ('B020', 'Respiratory tract infections, recurrent (RTIs, sinusitis, bronchitis, otitis media, pharyngitis)'), ('B030', 'Herpes zoster'), ('B040', 'Angular cheilitis'), ('B050', 'Oral ulcerations, recurrent'), ('B060', 'Papular pruritic eruptions'), ('B070', 'Seborrhoeic dermatitis'), ('B080', 'Fungal nail infections of fingers'), ('C020', 'Chronic diarrhoea, unexplained, (for longer than one month)'), ('C030', 'Persistent fever, unexplained (intermittent or constant for longer than one month)'), ('C040', 'Oral candidiasis'), ('C050', 'Oral hairy leukoplakia'), ('C060', 'Pulmonary tuberculosis (TB) diagnosed in last two years'), ('C070', 'Bacterial infections, severe presumed  (e.g. pneumonia, empyema, pyomyositis, bone or'), ('C080', 'Joint infection, meningitis, bacteraemia'), ('C090', 'Acute necrotizing ulcerative stomatitis, gingivitis or periodontitis'), ('C100', 'Anaemia, unexplained (<8 g/dl), and or neutropenia (<500/mm3) and or'), ('C110', 'Thrombocytopenia (<50 000/ mm3) for more than one month'), ('D010', 'HIV wasting syndrome'), ('D020', 'Pneumocystis pneumonia'), ('D030', 'Recurrent severe or radiological bacterial pneumonia'), ('D040', 'Chronic herpes simplex infection (orolabial, genital or anorectal of more than one month’s duration)'), ('D050', 'Oesophageal candidiasis'), ('D060', 'Extrapulmonary TB'), ('D070', 'Kaposi’s sarcoma'), ('D080', 'Central nervous system (CNS) toxoplasmosis'), ('D090', 'HIV encephalopathy'), ('E110', 'Extrapulmonary cryptococcosis including meningitis'), ('E120', 'Disseminated non-tuberculous mycobacteria infection'), ('E130', 'Progressive multifocal leukoencephalopathy (PML)'), ('E140', 'Candida of trachea, bronchi or lungs'), ('E150', 'Cryptosporidiosis'), ('E160', 'Isosporiasis'), ('E170', 'Visceral herpes simplex infection'), ('E180', 'Cytomegalovirus (CMV) infection (retinitis or of an organ other than liver, spleen or lymph nodes)'), ('E190', 'Any disseminated mycosis (e.g. histoplasmosis, coccidiomycosis, penicilliosis)'), ('E200', 'Recurrent non-typhoidal salmonella septicaemia'), ('E210', 'Lymphoma (cerebral or B cell non-Hodgkin)'), ('E220', 'Invasive cervical carcinoma'), ('E230', 'Visceral leishmaniasis')], max_length=200)),
                ('dx_date', models.DateField(blank=True, help_text='Provide if known', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WhoStaging',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('dashboard_comment', models.CharField(editable=False, max_length=50, null=True)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('who_stage', models.CharField(choices=[('I', 'Stage I'), ('II', 'Stage II'), ('III', 'Stage III'), ('IV', 'Stage IV'), ('unknown', 'Unknown')], default='unknown', max_length=25)),
                ('comment', models.TextField(blank=True, max_length=250, null=True)),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='ba_namotswe.SubjectVisit')),
            ],
            options={
                'verbose_name': 'WHO Staging',
                'verbose_name_plural': 'WHO Staging',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='whodiagnosis',
            name='who_staging',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ba_namotswe.WhoStaging'),
        ),
        migrations.AddField(
            model_name='transfer',
            name='transfer_record',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ba_namotswe.TransferRecord'),
        ),
        migrations.AddField(
            model_name='tb',
            name='tb_record',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ba_namotswe.TbRecord'),
        ),
        migrations.AddField(
            model_name='subjectrequisition',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='ba_namotswe.SubjectVisit'),
        ),
        migrations.AlterUniqueTogether(
            name='requisitionmetadata',
            unique_together=set([('subject_identifier', 'visit_schedule_name', 'schedule_name', 'visit_code', 'model', 'panel_name')]),
        ),
        migrations.AddField(
            model_name='pregnancyhistory',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='ba_namotswe.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='pregnancy',
            name='pregnancy_history',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ba_namotswe.PregnancyHistory'),
        ),
        migrations.AddField(
            model_name='oirecord',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='ba_namotswe.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='oi',
            name='oi_record',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ba_namotswe.OiRecord'),
        ),
        migrations.AddField(
            model_name='labrecord',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='ba_namotswe.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='extractionchecklist',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='ba_namotswe.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='entrytocare',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='ba_namotswe.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='death',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='ba_namotswe.SubjectVisit'),
        ),
        migrations.AlterUniqueTogether(
            name='crfmetadata',
            unique_together=set([('subject_identifier', 'visit_schedule_name', 'schedule_name', 'visit_code', 'model')]),
        ),
        migrations.AddField(
            model_name='artrecord',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='ba_namotswe.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='adherencecounselling',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='ba_namotswe.SubjectVisit'),
        ),
    ]
