# -*- coding: utf-8 -*-
# Generated by Django 1.10.1 on 2016-11-02 04:30
from __future__ import unicode_literals

import ba_namotswe.models.enrollment
import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_crypto_fields.fields.encrypted_char_field
import django_crypto_fields.fields.encrypted_text_field
import django_crypto_fields.fields.firstname_field
import django_crypto_fields.fields.identity_field
import django_crypto_fields.fields.lastname_field
import django_crypto_fields.mixins
import django_extensions.db.fields
import django_revision.revision_field
import edc_base.model.fields.custom_fields
import edc_base.model.fields.hostname_modification_field
import edc_base.model.fields.userfield
import edc_base.model.fields.uuid_auto_field
import edc_base.model.models.url_mixin
import edc_base.model.validators.date
import edc_consent.validators
import edc_protocol.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AdherenceCounselling',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('pending_fields', models.TextField(editable=False, null=True, verbose_name='Pending')),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('no_report', models.BooleanField(default=False, editable=False)),
                ('no_report_datetime', models.DateTimeField(editable=False, null=True)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('dashboard_comment', models.CharField(editable=False, max_length=50, null=True)),
                ('comment', models.TextField(blank=True, help_text='DO NOT include any information that could be used to identify the patient.', max_length=150, null=True)),
                ('counselling_date', models.DateField(blank=True, null=True, verbose_name='Date of Adherence Counseling')),
                ('relation', models.CharField(choices=[('mother', 'Mother'), ('father', 'Father'), ('grandmother', 'Grandmother'), ('grandfather', 'Grandfather'), ('aunt', 'Aunt'), ('uncle', 'Uncle'), ('sister', 'Sister'), ('legal_guardian', 'Legal Guardian'), ('N/A', 'Not Applicable'), ('OTHER', 'Other, specify'), ('unknown', 'Unknown')], default='unknown', max_length=25, verbose_name='Relationship of Adherence Partner to Individual')),
                ('relation_other', models.CharField(blank=True, max_length=25, null=True, verbose_name="If 'Other', please specify")),
            ],
            options={
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('visit_schedule_name', models.CharField(editable=False, help_text='the name of the visit schedule used to find the "schedule"', max_length=25, null=True)),
                ('schedule_name', models.CharField(editable=False, help_text='the name of the schedule used to find the list of "visits" to create appointments', max_length=25, null=True)),
                ('visit_code', models.CharField(editable=False, max_length=25, null=True)),
                ('subject_identifier', models.CharField(editable=False, max_length=50, verbose_name='Subject Identifier')),
                ('timepoint_status', models.CharField(choices=[('open', 'Open'), ('feedback', 'Feedback'), ('closed', 'Closed')], default='open', max_length=15)),
                ('timepoint_opened_datetime', models.DateTimeField(editable=False, help_text="the original calculated model's datetime, updated in the signal", null=True)),
                ('timepoint_closed_datetime', models.DateTimeField(editable=False, null=True)),
                ('best_appt_datetime', models.DateTimeField(editable=False, null=True)),
                ('appt_close_datetime', models.DateTimeField(editable=False, null=True)),
                ('visit_instance', models.CharField(blank=True, db_index=True, default='0', help_text='A decimal to represent an additional report to be included with the original visit report. (NNNN.0)', max_length=1, null=True, validators=[django.core.validators.RegexValidator('[0-9]', 'Must be a number from 0-9')], verbose_name='Instance')),
                ('visit_code_sequence', models.IntegerField(blank=True, default=0, help_text='An integer to represent the sequence of additional appointments relative to the base appointment, 0, needed to complete data collection for the timepoint. (NNNN.0)', null=True, verbose_name='Sequence')),
                ('appt_datetime', models.DateTimeField(db_index=True, verbose_name='Appointment date and time')),
                ('appt_type', models.CharField(choices=[('clinic', 'In clinic'), ('telephone', 'By telephone'), ('home', 'At home')], default='clinic', help_text='Default for subject may be edited Subject Configuration.', max_length=20, verbose_name='Appointment type')),
                ('appt_status', models.CharField(choices=[('new', 'New'), ('in_progress', 'In Progress'), ('incomplete', 'Incomplete'), ('done', 'Done'), ('cancelled', 'Cancelled')], db_index=True, default='new', max_length=25, verbose_name='Status')),
                ('appt_reason', models.CharField(blank=True, help_text='Reason for appointment', max_length=25, verbose_name='Reason for appointment')),
                ('comment', models.CharField(blank=True, max_length=250, verbose_name='Comment')),
                ('is_confirmed', models.BooleanField(default=False, editable=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ArtRecord',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('pending_fields', models.TextField(editable=False, null=True, verbose_name='Pending')),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('no_report', models.BooleanField(default=False, editable=False)),
                ('no_report_datetime', models.DateTimeField(editable=False, null=True)),
                ('dashboard_comment', models.CharField(editable=False, max_length=50, null=True)),
                ('comment', models.TextField(blank=True, help_text='DO NOT include any information that could be used to identify the patient.', max_length=150, null=True)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
            ],
            options={
                'verbose_name': 'ART Record',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ArtRegimen',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('pending_fields', models.TextField(editable=False, null=True, verbose_name='Pending')),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('no_report', models.BooleanField(default=False, editable=False)),
                ('no_report_datetime', models.DateTimeField(editable=False, null=True)),
                ('regimen', models.CharField(choices=[('EFV+FTC+TDF', 'Atripla (FTC, TDF, EFV)'), ('3TC+AZT', 'Combivir (AZT, 3TC)'), ('3TC+ABC+AZT', 'Trizivir (AZT, 3TC, ABC)'), ('FTC+TDF', 'Truvada (TDF, FTC)'), ('3TC', '3TC'), ('ABC', 'Abacavir/ABC'), ('AZT', 'ATZ'), ('D4T', 'D4T'), ('DDI', 'DDI'), ('DTG', 'Dolutegravir/DTG'), ('EFV', 'Efavirenz/EFV (or Sustiva)'), ('FTC', 'Emtricitabine/FTC (Emtriva)'), ('IDV', 'Indinavir/IDV'), ('KTA', 'Kaletra/KTA (or Alulia)'), ('NFV', 'Nelfinavir/NFV'), ('NVP', 'Nevirapine/NVP'), ('RAL', 'Raltegravir/RAL'), ('TDF', 'Tenofovir/TDF'), ('unknown', 'Unknown'), ('OTHER', 'Other, specify...')], max_length=25)),
                ('started', models.DateField(blank=True, null=True)),
                ('stopped', models.DateField(blank=True, null=True, verbose_name='Stopped/Held')),
                ('status', models.CharField(choices=[('ongoing', 'Ongoing'), ('HELD', 'Held'), ('STOPPED', 'Stopped'), ('INITIAL', 'Initial')], default='ongoing', max_length=50)),
                ('reason', models.CharField(blank=True, max_length=25, null=True)),
                ('art_record', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ba_namotswe.ArtRecord')),
            ],
            options={
                'verbose_name': 'ART Regimen',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='CrfMetadata',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(editable=False, max_length=50, verbose_name='Subject Identifier')),
                ('visit_schedule_name', models.CharField(max_length=25)),
                ('schedule_name', models.CharField(max_length=25)),
                ('visit_code', models.CharField(max_length=25)),
                ('model', models.CharField(max_length=50)),
                ('current_entry_title', models.CharField(max_length=250, null=True)),
                ('show_order', models.IntegerField(default=0)),
                ('entry_status', models.CharField(choices=[('REQUIRED', 'New'), ('KEYED', 'Keyed'), ('MISSED', 'Missed'), ('NOT_REQUIRED', 'Not required')], db_index=True, default='REQUIRED', max_length=25)),
                ('due_datetime', models.DateTimeField(blank=True, null=True)),
                ('report_datetime', models.DateTimeField(blank=True, null=True)),
                ('entry_comment', models.TextField(blank=True, max_length=250, null=True)),
                ('close_datetime', models.DateTimeField(blank=True, null=True)),
                ('fill_datetime', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Crf Metadata',
                'verbose_name_plural': 'Crf Metadata',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Death',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, unique=True, verbose_name='Subject Identifier')),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('death_date', models.DateField(blank=True, null=True, verbose_name='Date of Death')),
                ('death_cause', models.CharField(blank=True, max_length=25, null=True, verbose_name='Cause of Death')),
            ],
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Enrollment',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(default=ba_namotswe.models.enrollment.get_uuid, editable=False, max_length=50, unique=True, verbose_name='Subject Identifier')),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('study_site', models.CharField(default='10', editable=False, max_length=10)),
                ('slh_identifier', models.CharField(max_length=25, unique=True, verbose_name='SLH Number')),
                ('cm_identifier', models.CharField(blank=True, help_text='Provide if available.', max_length=25, null=True, verbose_name='CM Number')),
                ('initials', models.CharField(blank=True, max_length=3, null=True)),
                ('entry_to_care', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, validators=[django.core.validators.RegexValidator('^Yes$', message='Patient is not eligible for enrollment.')], verbose_name='Patient entered into care on or after 1 Jan 2001?')),
                ('initiation', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, validators=[django.core.validators.RegexValidator('^Yes$', message='Patient is not eligible for enrollment.')], verbose_name='Patient initiated ART on or before 1 June 2016?')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=1, verbose_name='Gender')),
                ('dob', models.DateField(help_text='Format is YYYY-MM-DD', validators=[ba_namotswe.models.enrollment.validate_dob], verbose_name='Date of birth')),
                ('caregiver_relation', models.CharField(choices=[('mother', 'Mother'), ('father', 'Father'), ('grandmother', 'Grandmother'), ('grandfather', 'Grandfather'), ('aunt', 'Aunt'), ('uncle', 'Uncle'), ('sister', 'Sister'), ('legal_guardian', 'Legal Guardian'), ('N/A', 'Not Applicable'), ('OTHER', 'Other, specify'), ('unknown', 'Unknown')], default='unknown', max_length=25, verbose_name='Caregiver/Next of Kin Relationship')),
                ('caregiver_relation_other', models.CharField(blank=True, max_length=25, null=True, verbose_name='Caregiver/Next of Kin Relationship: "Other"')),
            ],
            options={
                'verbose_name': 'Enrollment',
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='EntryToCare',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('pending_fields', models.TextField(editable=False, null=True, verbose_name='Pending')),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('no_report', models.BooleanField(default=False, editable=False)),
                ('no_report_datetime', models.DateTimeField(editable=False, null=True)),
                ('dashboard_comment', models.CharField(editable=False, max_length=50, null=True)),
                ('comment', models.TextField(blank=True, help_text='DO NOT include any information that could be used to identify the patient.', max_length=150, null=True)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('age_at_entry', models.IntegerField(editable=False, null=True)),
                ('entry_date', models.DateField(blank=True, null=True, validators=[edc_base.model.validators.date.date_not_future, django.core.validators.MinValueValidator(datetime.date(2002, 1, 1)), django.core.validators.MaxValueValidator(datetime.date(2016, 6, 1))], verbose_name='Date entered into care')),
                ('weight_measured', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('unknown', 'Unknown')], default='unknown', max_length=15, verbose_name='Was weight measured at entry?')),
                ('weight', models.DecimalField(blank=True, decimal_places=2, help_text='Provide if available.', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(20), django.core.validators.MaxValueValidator(136)], verbose_name='Weight at entry (kg)')),
                ('height_measured', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('unknown', 'Unknown')], default='unknown', max_length=15, verbose_name='Was height measured at entry?')),
                ('height', models.DecimalField(blank=True, decimal_places=2, help_text='Provide if available.', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(244)], verbose_name='Height at entry (cm)')),
                ('hiv_dx_date', models.DateField(blank=True, help_text='Provide if available. Use date entered into care if unknown.', null=True, validators=[edc_base.model.validators.date.date_not_future], verbose_name='HIV Diagnosis Date ')),
                ('hiv_dx_date_estimated', models.BooleanField(default=False, editable=False, help_text='If True, using entry date as HIV diagnosis date.')),
                ('art_init_date', models.DateField(blank=True, help_text='Provide if available.', null=True, validators=[edc_base.model.validators.date.date_not_future], verbose_name='ART Initiation Date')),
                ('phiv', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('unknown', 'Unknown')], default='unknown', help_text='Diagnosis prior to 10 years of age', max_length=15, verbose_name='Was subject "perinatally infected"?')),
                ('art_preg', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('unknown', 'Unknown')], default='unknown', max_length=15, verbose_name="Did the subject's mother receive ARVs during pregnancy?")),
                ('art_preg_type', models.CharField(choices=[('AZT', 'AZT Monotherapy'), ('sdNVP', 'Single-dose NVP'), ('AZT-sdNVP', 'AZT and dsNVP'), ('tripleARV', 'triple ARV'), ('OTHER', 'Other, please specify'), ('N/A', 'Not applicable')], default='N/A', max_length=25, verbose_name='If "Yes", specify the maternal ARVs received during pregnancy:')),
                ('art_preg_type_other', models.CharField(blank=True, max_length=25, null=True, verbose_name='If "Other" maternal ARVs received during pregnancy, please specify:')),
                ('infant_ppx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('unknown', 'Unknown')], default='unknown', max_length=15, verbose_name='Did subject receive infant prophylaxis in the 1st month of life?')),
                ('infant_ppx_type', models.CharField(choices=[('sdNVP', 'Single-dose NVP'), ('AZT', 'AZT Monotherapy'), ('AZT-sdNVP', 'AZT and dsNVP'), ('extNVP', 'Extended NVP'), ('N/A', 'Not applicable')], default='N/A', max_length=25, verbose_name='If "Yes", specify the infant prophylaxis.')),
            ],
            options={
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalAdherenceCounselling',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('pending_fields', models.TextField(editable=False, null=True, verbose_name='Pending')),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('no_report', models.BooleanField(default=False, editable=False)),
                ('no_report_datetime', models.DateTimeField(editable=False, null=True)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('dashboard_comment', models.CharField(editable=False, max_length=50, null=True)),
                ('comment', models.TextField(blank=True, help_text='DO NOT include any information that could be used to identify the patient.', max_length=150, null=True)),
                ('counselling_date', models.DateField(blank=True, null=True, verbose_name='Date of Adherence Counseling')),
                ('relation', models.CharField(choices=[('mother', 'Mother'), ('father', 'Father'), ('grandmother', 'Grandmother'), ('grandfather', 'Grandfather'), ('aunt', 'Aunt'), ('uncle', 'Uncle'), ('sister', 'Sister'), ('legal_guardian', 'Legal Guardian'), ('N/A', 'Not Applicable'), ('OTHER', 'Other, specify'), ('unknown', 'Unknown')], default='unknown', max_length=25, verbose_name='Relationship of Adherence Partner to Individual')),
                ('relation_other', models.CharField(blank=True, max_length=25, null=True, verbose_name="If 'Other', please specify")),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical adherence counselling',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalArtRecord',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('pending_fields', models.TextField(editable=False, null=True, verbose_name='Pending')),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('no_report', models.BooleanField(default=False, editable=False)),
                ('no_report_datetime', models.DateTimeField(editable=False, null=True)),
                ('dashboard_comment', models.CharField(editable=False, max_length=50, null=True)),
                ('comment', models.TextField(blank=True, help_text='DO NOT include any information that could be used to identify the patient.', max_length=150, null=True)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical ART Record',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalArtRegimen',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('pending_fields', models.TextField(editable=False, null=True, verbose_name='Pending')),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('no_report', models.BooleanField(default=False, editable=False)),
                ('no_report_datetime', models.DateTimeField(editable=False, null=True)),
                ('regimen', models.CharField(choices=[('EFV+FTC+TDF', 'Atripla (FTC, TDF, EFV)'), ('3TC+AZT', 'Combivir (AZT, 3TC)'), ('3TC+ABC+AZT', 'Trizivir (AZT, 3TC, ABC)'), ('FTC+TDF', 'Truvada (TDF, FTC)'), ('3TC', '3TC'), ('ABC', 'Abacavir/ABC'), ('AZT', 'ATZ'), ('D4T', 'D4T'), ('DDI', 'DDI'), ('DTG', 'Dolutegravir/DTG'), ('EFV', 'Efavirenz/EFV (or Sustiva)'), ('FTC', 'Emtricitabine/FTC (Emtriva)'), ('IDV', 'Indinavir/IDV'), ('KTA', 'Kaletra/KTA (or Alulia)'), ('NFV', 'Nelfinavir/NFV'), ('NVP', 'Nevirapine/NVP'), ('RAL', 'Raltegravir/RAL'), ('TDF', 'Tenofovir/TDF'), ('unknown', 'Unknown'), ('OTHER', 'Other, specify...')], max_length=25)),
                ('started', models.DateField(blank=True, null=True)),
                ('stopped', models.DateField(blank=True, null=True, verbose_name='Stopped/Held')),
                ('status', models.CharField(choices=[('ongoing', 'Ongoing'), ('HELD', 'Held'), ('STOPPED', 'Stopped'), ('INITIAL', 'Initial')], default='ongoing', max_length=50)),
                ('reason', models.CharField(blank=True, max_length=25, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('art_record', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ba_namotswe.ArtRecord')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical ART Regimen',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalDeath',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(db_index=True, max_length=50, verbose_name='Subject Identifier')),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('death_date', models.DateField(blank=True, null=True, verbose_name='Date of Death')),
                ('death_cause', models.CharField(blank=True, max_length=25, null=True, verbose_name='Cause of Death')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical death',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalEnrollment',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(db_index=True, default=ba_namotswe.models.enrollment.get_uuid, editable=False, max_length=50, verbose_name='Subject Identifier')),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('study_site', models.CharField(default='10', editable=False, max_length=10)),
                ('slh_identifier', models.CharField(db_index=True, max_length=25, verbose_name='SLH Number')),
                ('cm_identifier', models.CharField(blank=True, help_text='Provide if available.', max_length=25, null=True, verbose_name='CM Number')),
                ('initials', models.CharField(blank=True, max_length=3, null=True)),
                ('entry_to_care', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, validators=[django.core.validators.RegexValidator('^Yes$', message='Patient is not eligible for enrollment.')], verbose_name='Patient entered into care on or after 1 Jan 2001?')),
                ('initiation', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, validators=[django.core.validators.RegexValidator('^Yes$', message='Patient is not eligible for enrollment.')], verbose_name='Patient initiated ART on or before 1 June 2016?')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=1, verbose_name='Gender')),
                ('dob', models.DateField(help_text='Format is YYYY-MM-DD', validators=[ba_namotswe.models.enrollment.validate_dob], verbose_name='Date of birth')),
                ('caregiver_relation', models.CharField(choices=[('mother', 'Mother'), ('father', 'Father'), ('grandmother', 'Grandmother'), ('grandfather', 'Grandfather'), ('aunt', 'Aunt'), ('uncle', 'Uncle'), ('sister', 'Sister'), ('legal_guardian', 'Legal Guardian'), ('N/A', 'Not Applicable'), ('OTHER', 'Other, specify'), ('unknown', 'Unknown')], default='unknown', max_length=25, verbose_name='Caregiver/Next of Kin Relationship')),
                ('caregiver_relation_other', models.CharField(blank=True, max_length=25, null=True, verbose_name='Caregiver/Next of Kin Relationship: "Other"')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Enrollment',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalEntryToCare',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('pending_fields', models.TextField(editable=False, null=True, verbose_name='Pending')),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('no_report', models.BooleanField(default=False, editable=False)),
                ('no_report_datetime', models.DateTimeField(editable=False, null=True)),
                ('dashboard_comment', models.CharField(editable=False, max_length=50, null=True)),
                ('comment', models.TextField(blank=True, help_text='DO NOT include any information that could be used to identify the patient.', max_length=150, null=True)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('age_at_entry', models.IntegerField(editable=False, null=True)),
                ('entry_date', models.DateField(blank=True, null=True, validators=[edc_base.model.validators.date.date_not_future, django.core.validators.MinValueValidator(datetime.date(2002, 1, 1)), django.core.validators.MaxValueValidator(datetime.date(2016, 6, 1))], verbose_name='Date entered into care')),
                ('weight_measured', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('unknown', 'Unknown')], default='unknown', max_length=15, verbose_name='Was weight measured at entry?')),
                ('weight', models.DecimalField(blank=True, decimal_places=2, help_text='Provide if available.', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(20), django.core.validators.MaxValueValidator(136)], verbose_name='Weight at entry (kg)')),
                ('height_measured', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('unknown', 'Unknown')], default='unknown', max_length=15, verbose_name='Was height measured at entry?')),
                ('height', models.DecimalField(blank=True, decimal_places=2, help_text='Provide if available.', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(244)], verbose_name='Height at entry (cm)')),
                ('hiv_dx_date', models.DateField(blank=True, help_text='Provide if available. Use date entered into care if unknown.', null=True, validators=[edc_base.model.validators.date.date_not_future], verbose_name='HIV Diagnosis Date ')),
                ('hiv_dx_date_estimated', models.BooleanField(default=False, editable=False, help_text='If True, using entry date as HIV diagnosis date.')),
                ('art_init_date', models.DateField(blank=True, help_text='Provide if available.', null=True, validators=[edc_base.model.validators.date.date_not_future], verbose_name='ART Initiation Date')),
                ('phiv', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('unknown', 'Unknown')], default='unknown', help_text='Diagnosis prior to 10 years of age', max_length=15, verbose_name='Was subject "perinatally infected"?')),
                ('art_preg', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('unknown', 'Unknown')], default='unknown', max_length=15, verbose_name="Did the subject's mother receive ARVs during pregnancy?")),
                ('art_preg_type', models.CharField(choices=[('AZT', 'AZT Monotherapy'), ('sdNVP', 'Single-dose NVP'), ('AZT-sdNVP', 'AZT and dsNVP'), ('tripleARV', 'triple ARV'), ('OTHER', 'Other, please specify'), ('N/A', 'Not applicable')], default='N/A', max_length=25, verbose_name='If "Yes", specify the maternal ARVs received during pregnancy:')),
                ('art_preg_type_other', models.CharField(blank=True, max_length=25, null=True, verbose_name='If "Other" maternal ARVs received during pregnancy, please specify:')),
                ('infant_ppx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('unknown', 'Unknown')], default='unknown', max_length=15, verbose_name='Did subject receive infant prophylaxis in the 1st month of life?')),
                ('infant_ppx_type', models.CharField(choices=[('sdNVP', 'Single-dose NVP'), ('AZT', 'AZT Monotherapy'), ('AZT-sdNVP', 'AZT and dsNVP'), ('extNVP', 'Extended NVP'), ('N/A', 'Not applicable')], default='N/A', max_length=25, verbose_name='If "Yes", specify the infant prophylaxis.')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical entry to care',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalInCare',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('pending_fields', models.TextField(editable=False, null=True, verbose_name='Pending')),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('no_report', models.BooleanField(default=False, editable=False)),
                ('no_report_datetime', models.DateTimeField(editable=False, null=True)),
                ('dashboard_comment', models.CharField(editable=False, max_length=50, null=True)),
                ('comment', models.TextField(blank=True, help_text='DO NOT include any information that could be used to identify the patient.', max_length=150, null=True)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('weight_measured', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('unknown', 'Unknown')], default='unknown', max_length=15, verbose_name='Was weight measured?')),
                ('weight', models.DecimalField(blank=True, decimal_places=2, help_text='Provide if available.', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(20), django.core.validators.MaxValueValidator(136)], verbose_name='Weight (kg)')),
                ('height_measured', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('unknown', 'Unknown')], default='unknown', max_length=15, verbose_name='Was height measured?')),
                ('height', models.DecimalField(blank=True, decimal_places=2, help_text='Provide if available.', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(244)], verbose_name='Height (cm)')),
                ('hospital', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('unknown', 'Unknown')], default='unknown', max_length=15, verbose_name='Has the patient been hospitalized since last visit?')),
                ('hospital_date', models.DateField(blank=True, null=True, verbose_name='Date hospitalized')),
                ('hospital_reason', models.TextField(blank=True, null=True, verbose_name='Reason for patient was hospitalized')),
                ('disclosure_to_patient', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('unknown', 'Unknown')], default='unknown', help_text='If <= 18 years, Is there evidence that disclosure has been made to the youth/adolescent that they are HIV-infected?', max_length=15, verbose_name='Evidence of disclosure of HIV status to patient?')),
                ('disclosure_to_patient_date', models.DateField(blank=True, null=True, verbose_name='Date of disclosure to patient')),
                ('disclosure_to_others', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('unknown', 'Unknown')], default='unknown', help_text='Is there evidence that the patient has disclosed his/her HIV status to others?', max_length=15, verbose_name='Evidence of disclosure of HIV status by patient to others?')),
                ('disclosure_to_others_date', models.DateField(blank=True, null=True, verbose_name='Date of disclosure to others')),
                ('disclosure_by_caregiver', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('unknown', 'Unknown'), ('N/A', 'Not applicable')], default='unknown', help_text="If <= 18 years, is there evidence that the caregiver has disclosed the patient's HIV status to others?", max_length=15, verbose_name='Evidence of disclosure of HIV status by caregiver?')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical in care',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalLabRecord',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('pending_fields', models.TextField(editable=False, null=True, verbose_name='Pending')),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('no_report', models.BooleanField(default=False, editable=False)),
                ('no_report_datetime', models.DateTimeField(editable=False, null=True)),
                ('dashboard_comment', models.CharField(editable=False, max_length=50, null=True)),
                ('comment', models.TextField(blank=True, help_text='DO NOT include any information that could be used to identify the patient.', max_length=150, null=True)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical lab record',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalLabTest',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('pending_fields', models.TextField(editable=False, null=True, verbose_name='Pending')),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('no_report', models.BooleanField(default=False, editable=False)),
                ('no_report_datetime', models.DateTimeField(editable=False, null=True)),
                ('utest_id', models.CharField(choices=[('CD4', 'CD4 absolute'), ('CD4_perc', 'CD4 percentage'), ('VL', 'Viral Load')], max_length=25, verbose_name='Test')),
                ('test_date', models.DateField(blank=True, help_text='Leave blank to use visit date', null=True, validators=[edc_base.model.validators.date.date_not_future])),
                ('quantifier', models.CharField(choices=[('<', '<'), ('<=', '<='), ('=', '= '), ('>=', '>='), ('>', '>')], default='=', max_length=3, verbose_name='quantifier')),
                ('value', models.CharField(max_length=10)),
                ('units', models.CharField(choices=[('%', '%'), ('10^3/uL', '10^3/uL'), ('10^3uL', '10^3uL'), ('10^6/uL', '10^6/uL'), ('cells/ul', 'cells/ul'), ('copies/ml', 'copies/ml'), ('fL', 'fL'), ('g/dL', 'g/dL'), ('g/L', 'g/L'), ('mg/L', 'mg/L'), ('mm/H', 'mm/H'), ('mmol/L', 'mmol/L'), ('ng/ml', 'ng/ml'), ('pg', 'pg'), ('ratio', 'ratio'), ('U/L', 'U/L'), ('umol/L', 'umol/L')], editable=False, max_length=10, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical lab test',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalLostToFollowup',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(db_index=True, max_length=50, verbose_name='Subject Identifier')),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('last_contact_date', models.DateField()),
                ('last_visit_date', models.DateField()),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical lost to followup',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalOi',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('pending_fields', models.TextField(editable=False, null=True, verbose_name='Pending')),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('no_report', models.BooleanField(default=False, editable=False)),
                ('no_report_datetime', models.DateTimeField(editable=False, null=True)),
                ('oi', models.CharField(choices=[('CANDIDIASIS_OF_BRONCHI_TRACHEA_ESOPHAGUS_OR_LUNGS', 'Candidiasis of bronchi, trachea, esophagus, or lungs'), ('INVASIVE_CERVICAL_CANCER', 'Invasive cervical cancer'), ('COCCIDIOIDOMYCOSIS', 'Coccidioidomycosis'), ('CRYPTOCOCCOSIS', 'Cryptococcosis'), ('CRYPTOSPORIDIOSIS_CHRONIC_INTESTINAL_GREATER_THAN_1_MONTH_DURATION', 'Cryptosporidiosis, chronic intestinal (greater than 1 months duration)'), ('ENCEPHALOPHALOPAHY_HIV_RELATED', 'Encephalopathy, HIV-related'), ('HERPES_SIMPLEX', 'Herpes simplex: chronic ulcer(s) (greater than 1 month duration); or bronchitis, pneumonitis, or esophagitis'), ('HISTOPLASMOSIS', 'Histoplasmosis'), ('ISOSPORIASIS_CHRONIC_INTESTINAL_GREATER_THAN_1_MONTH_DURATION', 'Isosporiasis, chronic intestinal (greater than 1 months duration)'), ('KAPOSI_SARCOMA', "Kaposi's sarcoma"), ('LYMPHOMA', 'Lymphoma, multiple forms'), ('MYCOBACTERIUM_AVIUM_COMPLEX', 'Mycobacterium avium complex'), ('TUBERCULOSIS', 'Tuberculosis'), ('PNEUMOCYSTIS_JIROVECI_PNEUMONIA', 'Pneumocystis jiroveci pneumonia (PJP)'), ('PNEUMONIA_RECURRENT', 'Pneumonia, recurrent'), ('PROGRESSIVE_MULTILOCAL_LEUKOENCEPHALOPATHY', 'Progressive multifocal leukoencephalopathy'), ('SALMONELLA_SEPTICEMIA_RECURRENT', 'Salmonella septicemia, recurrent'), ('TOXOPLASMOSIS_OF_BRAIN', 'Toxoplasmosis of brain'), ('WASTING_SYNDROME_DUE_TO_HIV', 'Wasting syndrome due to HIV')], max_length=200)),
                ('started', models.DateField()),
                ('stopped', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('ongoing', 'Ongoing'), ('resolved', 'Resolved'), ('resolved_estimated', 'Resolved/Estimated')], default='resolved', max_length=15)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical oi',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalOiRecord',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('pending_fields', models.TextField(editable=False, null=True, verbose_name='Pending')),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('no_report', models.BooleanField(default=False, editable=False)),
                ('no_report_datetime', models.DateTimeField(editable=False, null=True)),
                ('dashboard_comment', models.CharField(editable=False, max_length=50, null=True)),
                ('comment', models.TextField(blank=True, help_text='DO NOT include any information that could be used to identify the patient.', max_length=150, null=True)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Opportunistic Infection',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalPregnancy',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('pending_fields', models.TextField(editable=False, null=True, verbose_name='Pending')),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('no_report', models.BooleanField(default=False, editable=False)),
                ('no_report_datetime', models.DateTimeField(editable=False, null=True)),
                ('pregnancy_date', models.DateField(blank=True, null=True, verbose_name='Date of first clinical documentation of pregnancy')),
                ('delivery_date', models.DateField(blank=True, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Pregnancy',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalPregnancyHistory',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('pending_fields', models.TextField(editable=False, null=True, verbose_name='Pending')),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('no_report', models.BooleanField(default=False, editable=False)),
                ('no_report_datetime', models.DateTimeField(editable=False, null=True)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('dashboard_comment', models.CharField(editable=False, max_length=50, null=True)),
                ('comment', models.TextField(blank=True, help_text='DO NOT include any information that could be used to identify the patient.', max_length=150, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Pregnancy History',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalRegisteredSubject',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(db_index=True, editable=False, max_length=50, verbose_name='Subject Identifier')),
                ('subject_identifier_as_pk', models.CharField(editable=False, max_length=50, verbose_name='Subject Identifier as pk')),
                ('subject_identifier_aka', models.CharField(editable=False, help_text='track a previously allocated identifier.', max_length=50, null=True, verbose_name='Subject Identifier a.k.a')),
                ('first_name', django_crypto_fields.fields.firstname_field.FirstnameField(help_text=' (Encryption: RSA local)', max_length=71, null=True)),
                ('last_name', django_crypto_fields.fields.lastname_field.LastnameField(help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Last name')),
                ('initials', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[django.core.validators.RegexValidator(message='Ensure initials consist of letters only in upper case, no spaces.', regex='^[A-Z]{2,3}$')])),
                ('dob', models.DateField(help_text='Format is YYYY-MM-DD', null=True, verbose_name='Date of birth')),
                ('is_dob_estimated', edc_base.model.fields.custom_fields.IsDateEstimatedField(choices=[('-', 'No'), ('D', 'Yes, estimated the Day'), ('MD', 'Yes, estimated Month and Day'), ('YMD', 'Yes, estimated Year, Month and Day')], help_text='If the exact date is not known, please indicate which part of the date is estimated.', max_length=25, null=True, verbose_name='Is date of birth estimated?')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=1, null=True, verbose_name='Gender')),
                ('subject_consent_id', models.CharField(blank=True, max_length=100, null=True)),
                ('registration_identifier', models.CharField(blank=True, max_length=36, null=True)),
                ('sid', models.CharField(blank=True, max_length=15, null=True, verbose_name='SID')),
                ('study_site', models.CharField(blank=True, max_length=50, null=True)),
                ('relative_identifier', models.CharField(blank=True, help_text="For example, mother's identifier, if available / appropriate", max_length=25, null=True, verbose_name='Identifier of immediate relation')),
                ('identity', django_crypto_fields.fields.identity_field.IdentityField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True)),
                ('identity_type', edc_base.model.fields.custom_fields.IdentityTypeField(blank=True, choices=[('OMANG', 'Omang'), ('DRIVERS', "Driver's License"), ('PASSPORT', 'Passport'), ('OMANG_RCPT', 'Omang Receipt'), ('OTHER', 'Other')], max_length=15, null=True, verbose_name='What type of identity number is this?')),
                ('screening_identifier', models.CharField(blank=True, max_length=36, null=True)),
                ('screening_datetime', models.DateTimeField(blank=True, null=True)),
                ('screening_age_in_years', models.IntegerField(blank=True, null=True)),
                ('registration_datetime', models.DateTimeField(blank=True, null=True)),
                ('randomization_datetime', models.DateTimeField(blank=True, null=True)),
                ('registration_status', models.CharField(blank=True, max_length=25, null=True, verbose_name='Registration status')),
                ('comment', models.TextField(blank=True, max_length=250, null=True, verbose_name='Comment')),
                ('additional_key', models.CharField(default=None, editable=False, help_text='A uuid (or some other text value) to be added to bypass the unique constraint of just firstname, initials, and dob.The default constraint proves limiting since the source model usually has some otherattribute in additional to first_name, initials and dob which is not captured in this model', max_length=36, null=True, verbose_name='-')),
                ('dm_comment', models.CharField(editable=False, max_length=150, null=True, verbose_name='Data Management comment')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical registered subject',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalSubjectConsent',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('first_name', django_crypto_fields.fields.firstname_field.FirstnameField(help_text=' (Encryption: RSA local)', max_length=71, null=True)),
                ('last_name', django_crypto_fields.fields.lastname_field.LastnameField(help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Last name')),
                ('initials', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[django.core.validators.RegexValidator(message='Ensure initials consist of letters only in upper case, no spaces.', regex='^[A-Z]{2,3}$')])),
                ('dob', models.DateField(help_text='Format is YYYY-MM-DD', null=True, verbose_name='Date of birth')),
                ('is_dob_estimated', edc_base.model.fields.custom_fields.IsDateEstimatedField(choices=[('-', 'No'), ('D', 'Yes, estimated the Day'), ('MD', 'Yes, estimated Month and Day'), ('YMD', 'Yes, estimated Year, Month and Day')], help_text='If the exact date is not known, please indicate which part of the date is estimated.', max_length=25, null=True, verbose_name='Is date of birth estimated?')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('U', 'Undetermined')], max_length=1, null=True, verbose_name='Gender')),
                ('guardian_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if subject is a minor. Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma then followe by a space. (Encryption: RSA local)", max_length=71, null=True, validators=[edc_consent.validators.FullNameValidator()], verbose_name="Guardian's Last and first name (minors only)")),
                ('subject_type', models.CharField(max_length=25)),
                ('is_verified', models.BooleanField(default=False, editable=False)),
                ('is_verified_datetime', models.DateTimeField(editable=False, null=True)),
                ('verified_by', models.CharField(editable=False, max_length=25, null=True)),
                ('subject_identifier', models.CharField(blank=True, max_length=50, verbose_name='Subject Identifier')),
                ('subject_identifier_as_pk', models.CharField(default=None, editable=False, max_length=50, verbose_name='Subject Identifier as pk')),
                ('subject_identifier_aka', models.CharField(editable=False, help_text='track a previously allocated identifier.', max_length=50, null=True, verbose_name='Subject Identifier a.k.a')),
                ('consent_datetime', models.DateTimeField(validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model.validators.date.datetime_not_future], verbose_name='Consent date and time')),
                ('version', models.CharField(default='?', editable=False, help_text="See 'Consent Type' for consent versions by period.", max_length=10, verbose_name='Consent version')),
                ('study_site', models.CharField(max_length=15, null=True)),
                ('sid', models.CharField(blank=True, help_text='Used for randomization against a prepared rando-list.', max_length=15, null=True, verbose_name='SID')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=250, null=True, verbose_name='Comment')),
                ('dm_comment', models.CharField(editable=False, help_text='see also edc.data manager.', max_length=150, null=True, verbose_name='Data Management comment')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical subject consent',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalSubjectRequisition',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('pending_fields', models.TextField(editable=False, null=True, verbose_name='Pending')),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('no_report', models.BooleanField(default=False, editable=False)),
                ('no_report_datetime', models.DateTimeField(editable=False, null=True)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('dashboard_comment', models.CharField(editable=False, max_length=50, null=True)),
                ('comment', models.TextField(blank=True, help_text='DO NOT include any information that could be used to identify the patient.', max_length=150, null=True)),
                ('panel_name', models.CharField(max_length=25)),
                ('requisition_identifier', models.CharField(db_index=True, editable=False, max_length=50, verbose_name='Requisition Id')),
                ('requisition_datetime', models.DateTimeField(verbose_name='Requisition Date')),
                ('drawn_datetime', models.DateTimeField(blank=True, help_text='If not drawn, leave blank. Same as date and time of finger prick in case on DBS.', null=True, verbose_name='Date / Time Specimen Drawn')),
                ('is_drawn', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='Yes', help_text='If No, provide a reason below', max_length=3, verbose_name='Was a specimen drawn?')),
                ('reason_not_drawn', models.CharField(blank=True, choices=[('collection_failed', 'Tried, but unable obtaining sample from patient'), ('absent', 'Patient did not attend visit'), ('refused', 'Patient refused'), ('no_supplies', 'No supplies')], max_length=25, null=True, verbose_name='If not drawn, please explain')),
                ('specimen_identifier', models.CharField(db_index=True, editable=False, max_length=50, null=True, verbose_name='Specimen Id')),
                ('study_site', models.CharField(max_length=10, null=True)),
                ('clinician_initials', edc_base.model.fields.custom_fields.InitialsField(blank=True, help_text='Type 2-3 letters, all in uppercase and no spaces', max_length=3, null=True, verbose_name='Initials')),
                ('specimen_type', models.CharField(max_length=25, verbose_name='Specimen type')),
                ('item_type', models.CharField(choices=[('tube', 'Tube'), ('swab', 'Swab'), ('dbs', 'DBS Card'), ('other', 'Other')], default='tube', max_length=25, verbose_name='Item collection type')),
                ('item_count', models.IntegerField(default=1, help_text='Number of tubes, samples, cards, etc being sent for this test/order only. Determines number of labels to print', verbose_name='Number of items')),
                ('estimated_volume', models.DecimalField(decimal_places=2, default=5.0, help_text='If applicable, estimated volume of sample for this test/order. This is the total volume if number of "tubes" above is greater than 1', max_digits=7, verbose_name='Estimated volume in mL')),
                ('comments', models.TextField(blank=True, max_length=25, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Subject Requisition',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalSubjectVisit',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('visit_schedule_name', models.CharField(editable=False, help_text='the name of the visit schedule used to find the "schedule"', max_length=25, null=True)),
                ('schedule_name', models.CharField(editable=False, help_text='the name of the schedule used to find the list of "visits" to create appointments', max_length=25, null=True)),
                ('visit_code', models.CharField(editable=False, max_length=25, null=True)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text='Date and time of this report', validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model.validators.date.datetime_not_future], verbose_name='Visit Date and Time')),
                ('report_date', models.DateField(editable=False, verbose_name='Visit Date')),
                ('reason', models.CharField(help_text='<Override the field class for this model field attribute in ModelForm>', max_length=25, verbose_name='What is the reason for this visit?')),
                ('study_status', models.CharField(help_text='<Override the field class for this model field attribute in ModelForm>', max_length=50, verbose_name="What is the participant's current study status")),
                ('require_crfs', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='Yes', max_length=10, verbose_name='Are scheduled data being submitted with this visit?')),
                ('reason_missed', models.CharField(blank=True, max_length=35, null=True, verbose_name="If 'missed' above, Reason scheduled visit was missed")),
                ('info_source', models.CharField(max_length=25, verbose_name='What is the main source of this information?')),
                ('info_source_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('survival_status', models.CharField(choices=[('alive', 'Alive'), ('dead', 'Dead'), ('unknown', 'Unknown')], default='alive', max_length=10, null=True, verbose_name="Participant's survival status")),
                ('last_alive_date', models.DateField(blank=True, null=True, validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model.validators.date.date_not_future], verbose_name='Date participant last known alive')),
                ('comments', models.TextField(blank=True, max_length=250, null=True, verbose_name='Comment if any additional pertinent information about the participant')),
                ('subject_identifier', models.CharField(editable=False, help_text='updated automatically', max_length=50, verbose_name='subject_identifier')),
                ('visit_date', models.DateField(validators=[django.core.validators.MinValueValidator(datetime.date(2001, 1, 1)), edc_base.model.validators.date.date_not_future], verbose_name='Visit Date')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('appointment', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ba_namotswe.Appointment')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical subject visit',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalTb',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('pending_fields', models.TextField(editable=False, null=True, verbose_name='Pending')),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('no_report', models.BooleanField(default=False, editable=False)),
                ('no_report_datetime', models.DateTimeField(editable=False, null=True)),
                ('dx_date', models.DateField(validators=[edc_base.model.validators.date.date_not_future], verbose_name='Date of diagnosis')),
                ('tb_type', models.CharField(choices=[('PULMONARY TB', 'Pulmonary TB'), ('NON PULMONARY TB', 'Non pulmonary TB'), ('unknown', 'Unknown')], max_length=30, verbose_name='TB type')),
                ('dx_method', models.CharField(choices=[('CULTURE POSITIVE', 'Culture Positive'), ('CXR', 'CXR'), ('OTHER IMAGING MODALITY', 'Other Imaging Modality'), ('CLINICAL DIAGNOSIS', 'Clinical Diagnosis'), ('OTHER', 'Other, describe'), ('unknown', 'Unknown')], max_length=30, verbose_name='Diagnosis method')),
                ('dx_method_other', models.CharField(blank=True, max_length=50, null=True, verbose_name="If 'Other', specify")),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical TB History',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalTbRecord',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('pending_fields', models.TextField(editable=False, null=True, verbose_name='Pending')),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('no_report', models.BooleanField(default=False, editable=False)),
                ('no_report_datetime', models.DateTimeField(editable=False, null=True)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('dashboard_comment', models.CharField(editable=False, max_length=50, null=True)),
                ('comment', models.TextField(blank=True, help_text='DO NOT include any information that could be used to identify the patient.', max_length=150, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Tuberculosis Infection History',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalTransfer',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('pending_fields', models.TextField(editable=False, null=True, verbose_name='Pending')),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('no_report', models.BooleanField(default=False, editable=False)),
                ('no_report_datetime', models.DateTimeField(editable=False, null=True)),
                ('transfer_date', models.DateField()),
                ('transfer_from', models.CharField(choices=[('idcc', 'IDCC'), ('private', 'Private Clinic'), ('bipai', 'BIPAI'), ('OTHER', 'Other, specify')], max_length=25, verbose_name='From ...')),
                ('transfer_from_other', models.CharField(blank=True, max_length=15, null=True, verbose_name='... from "Other"')),
                ('transfer_to', models.CharField(choices=[('idcc', 'IDCC'), ('private', 'Private Clinic'), ('bipai', 'BIPAI'), ('OTHER', 'Other, specify')], max_length=25, verbose_name='To ...')),
                ('transfer_to_other', models.CharField(blank=True, max_length=15, null=True, verbose_name='... to "Other"')),
                ('reason', models.TextField(blank=True, null=True, verbose_name='Reason')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical transfer',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalTransferRecord',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('pending_fields', models.TextField(editable=False, null=True, verbose_name='Pending')),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('no_report', models.BooleanField(default=False, editable=False)),
                ('no_report_datetime', models.DateTimeField(editable=False, null=True)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('dashboard_comment', models.CharField(editable=False, max_length=50, null=True)),
                ('comment', models.TextField(blank=True, help_text='DO NOT include any information that could be used to identify the patient.', max_length=150, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical transfer record',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalWhoDiagnosis',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('pending_fields', models.TextField(editable=False, null=True, verbose_name='Pending')),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('no_report', models.BooleanField(default=False, editable=False)),
                ('no_report_datetime', models.DateTimeField(editable=False, null=True)),
                ('dx', models.CharField(choices=[('A1', 'Asymptomatic'), ('A2', 'Persistent generalized lymphadenopathy (PGL)'), ('B040', 'Angular cheilitis'), ('B080', 'Fungal nail infections of fingers'), ('B030', 'Herpes zoster'), ('B050', 'Oral ulcerations, recurrent'), ('B060', 'Papular pruritic eruptions'), ('B020', 'Respiratory tract infections, recurrent (RTIs, sinusitis, bronchitis, otitis media, pharyngitis)'), ('B070', 'Seborrhoeic dermatitis'), ('B010', 'Weigh loss, moderate unexplained (<10% of presumed or measured body weight)'), ('B011', 'Weight loss, severe (>10% of presumed or measured body weight)'), ('C090', 'Acute necrotizing ulcerative stomatitis, gingivitis or periodontitis'), ('C100', 'Anaemia, unexplained (<8 g/dl), and or neutropenia (<500/mm3) and or'), ('C070', 'Bacterial infections, severe presumed  (e.g. pneumonia, empyema, pyomyositis, bone or'), ('C020', 'Chronic diarrhoea, unexplained, (for longer than one month)'), ('C080', 'Joint infection, meningitis, bacteraemia'), ('C040', 'Oral candidiasis'), ('C050', 'Oral hairy leukoplakia'), ('C030', 'Persistent fever, unexplained (intermittent or constant for longer than one month)'), ('C060', 'Pulmonary tuberculosis (TB) diagnosed in last two years'), ('C110', 'Thrombocytopenia (<50 000/ mm3) for more than one month'), ('D080', 'Central nervous system (CNS) toxoplasmosis'), ('D040', 'Chronic herpes simplex infection (orolabial, genital or anorectal of more than one month’s duration)'), ('D060', 'Extrapulmonary TB'), ('D090', 'HIV encephalopathy'), ('D010', 'HIV wasting syndrome'), ('D070', 'Kaposi’s sarcoma'), ('D050', 'Oesophageal candidiasis'), ('D020', 'Pneumocystis pneumonia'), ('D030', 'Recurrent severe or radiological bacterial pneumonia'), ('E190', 'Any disseminated mycosis (e.g. histoplasmosis, coccidiomycosis, penicilliosis)'), ('E140', 'Candida of trachea, bronchi or lungs'), ('E150', 'Cryptosporidiosis'), ('E180', 'Cytomegalovirus (CMV) infection (retinitis or of an organ other than liver, spleen or lymph nodes)'), ('E120', 'Disseminated non-tuberculous mycobacteria infection'), ('E110', 'Extrapulmonary cryptococcosis including meningitis'), ('E220', 'Invasive cervical carcinoma'), ('E160', 'Isosporiasis'), ('E210', 'Lymphoma (cerebral or B cell non-Hodgkin)'), ('E130', 'Progressive multifocal leukoencephalopathy (PML)'), ('E200', 'Recurrent non-typhoidal salmonella septicaemia'), ('E170', 'Visceral herpes simplex infection'), ('E230', 'Visceral leishmaniasis')], max_length=200)),
                ('dx_date', models.DateField(blank=True, help_text='Provide if known', null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical WHO Diagnosis',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalWhoStaging',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('pending_fields', models.TextField(editable=False, null=True, verbose_name='Pending')),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('no_report', models.BooleanField(default=False, editable=False)),
                ('no_report_datetime', models.DateTimeField(editable=False, null=True)),
                ('dashboard_comment', models.CharField(editable=False, max_length=50, null=True)),
                ('comment', models.TextField(blank=True, help_text='DO NOT include any information that could be used to identify the patient.', max_length=150, null=True)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('who_stage', models.CharField(choices=[('I', 'Stage I'), ('II', 'Stage II'), ('III', 'Stage III'), ('IV', 'Stage IV'), ('unknown', 'Unknown')], default='unknown', max_length=25, verbose_name='WHO stage')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical WHO Staging',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='InCare',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('pending_fields', models.TextField(editable=False, null=True, verbose_name='Pending')),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('no_report', models.BooleanField(default=False, editable=False)),
                ('no_report_datetime', models.DateTimeField(editable=False, null=True)),
                ('dashboard_comment', models.CharField(editable=False, max_length=50, null=True)),
                ('comment', models.TextField(blank=True, help_text='DO NOT include any information that could be used to identify the patient.', max_length=150, null=True)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('weight_measured', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('unknown', 'Unknown')], default='unknown', max_length=15, verbose_name='Was weight measured?')),
                ('weight', models.DecimalField(blank=True, decimal_places=2, help_text='Provide if available.', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(20), django.core.validators.MaxValueValidator(136)], verbose_name='Weight (kg)')),
                ('height_measured', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('unknown', 'Unknown')], default='unknown', max_length=15, verbose_name='Was height measured?')),
                ('height', models.DecimalField(blank=True, decimal_places=2, help_text='Provide if available.', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(244)], verbose_name='Height (cm)')),
                ('hospital', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('unknown', 'Unknown')], default='unknown', max_length=15, verbose_name='Has the patient been hospitalized since last visit?')),
                ('hospital_date', models.DateField(blank=True, null=True, verbose_name='Date hospitalized')),
                ('hospital_reason', models.TextField(blank=True, null=True, verbose_name='Reason for patient was hospitalized')),
                ('disclosure_to_patient', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('unknown', 'Unknown')], default='unknown', help_text='If <= 18 years, Is there evidence that disclosure has been made to the youth/adolescent that they are HIV-infected?', max_length=15, verbose_name='Evidence of disclosure of HIV status to patient?')),
                ('disclosure_to_patient_date', models.DateField(blank=True, null=True, verbose_name='Date of disclosure to patient')),
                ('disclosure_to_others', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('unknown', 'Unknown')], default='unknown', help_text='Is there evidence that the patient has disclosed his/her HIV status to others?', max_length=15, verbose_name='Evidence of disclosure of HIV status by patient to others?')),
                ('disclosure_to_others_date', models.DateField(blank=True, null=True, verbose_name='Date of disclosure to others')),
                ('disclosure_by_caregiver', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('unknown', 'Unknown'), ('N/A', 'Not applicable')], default='unknown', help_text="If <= 18 years, is there evidence that the caregiver has disclosed the patient's HIV status to others?", max_length=15, verbose_name='Evidence of disclosure of HIV status by caregiver?')),
            ],
            options={
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='LabRecord',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('pending_fields', models.TextField(editable=False, null=True, verbose_name='Pending')),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('no_report', models.BooleanField(default=False, editable=False)),
                ('no_report_datetime', models.DateTimeField(editable=False, null=True)),
                ('dashboard_comment', models.CharField(editable=False, max_length=50, null=True)),
                ('comment', models.TextField(blank=True, help_text='DO NOT include any information that could be used to identify the patient.', max_length=150, null=True)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
            ],
            options={
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='LabTest',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('pending_fields', models.TextField(editable=False, null=True, verbose_name='Pending')),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('no_report', models.BooleanField(default=False, editable=False)),
                ('no_report_datetime', models.DateTimeField(editable=False, null=True)),
                ('utest_id', models.CharField(choices=[('CD4', 'CD4 absolute'), ('CD4_perc', 'CD4 percentage'), ('VL', 'Viral Load')], max_length=25, verbose_name='Test')),
                ('test_date', models.DateField(blank=True, help_text='Leave blank to use visit date', null=True, validators=[edc_base.model.validators.date.date_not_future])),
                ('quantifier', models.CharField(choices=[('<', '<'), ('<=', '<='), ('=', '= '), ('>=', '>='), ('>', '>')], default='=', max_length=3, verbose_name='quantifier')),
                ('value', models.CharField(max_length=10)),
                ('units', models.CharField(choices=[('%', '%'), ('10^3/uL', '10^3/uL'), ('10^3uL', '10^3uL'), ('10^6/uL', '10^6/uL'), ('cells/ul', 'cells/ul'), ('copies/ml', 'copies/ml'), ('fL', 'fL'), ('g/dL', 'g/dL'), ('g/L', 'g/L'), ('mg/L', 'mg/L'), ('mm/H', 'mm/H'), ('mmol/L', 'mmol/L'), ('ng/ml', 'ng/ml'), ('pg', 'pg'), ('ratio', 'ratio'), ('U/L', 'U/L'), ('umol/L', 'umol/L')], editable=False, max_length=10, null=True)),
                ('lab_record', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ba_namotswe.LabRecord')),
            ],
            options={
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='LostToFollowup',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, unique=True, verbose_name='Subject Identifier')),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('last_contact_date', models.DateField()),
                ('last_visit_date', models.DateField()),
            ],
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Oi',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('pending_fields', models.TextField(editable=False, null=True, verbose_name='Pending')),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('no_report', models.BooleanField(default=False, editable=False)),
                ('no_report_datetime', models.DateTimeField(editable=False, null=True)),
                ('oi', models.CharField(choices=[('CANDIDIASIS_OF_BRONCHI_TRACHEA_ESOPHAGUS_OR_LUNGS', 'Candidiasis of bronchi, trachea, esophagus, or lungs'), ('INVASIVE_CERVICAL_CANCER', 'Invasive cervical cancer'), ('COCCIDIOIDOMYCOSIS', 'Coccidioidomycosis'), ('CRYPTOCOCCOSIS', 'Cryptococcosis'), ('CRYPTOSPORIDIOSIS_CHRONIC_INTESTINAL_GREATER_THAN_1_MONTH_DURATION', 'Cryptosporidiosis, chronic intestinal (greater than 1 months duration)'), ('ENCEPHALOPHALOPAHY_HIV_RELATED', 'Encephalopathy, HIV-related'), ('HERPES_SIMPLEX', 'Herpes simplex: chronic ulcer(s) (greater than 1 month duration); or bronchitis, pneumonitis, or esophagitis'), ('HISTOPLASMOSIS', 'Histoplasmosis'), ('ISOSPORIASIS_CHRONIC_INTESTINAL_GREATER_THAN_1_MONTH_DURATION', 'Isosporiasis, chronic intestinal (greater than 1 months duration)'), ('KAPOSI_SARCOMA', "Kaposi's sarcoma"), ('LYMPHOMA', 'Lymphoma, multiple forms'), ('MYCOBACTERIUM_AVIUM_COMPLEX', 'Mycobacterium avium complex'), ('TUBERCULOSIS', 'Tuberculosis'), ('PNEUMOCYSTIS_JIROVECI_PNEUMONIA', 'Pneumocystis jiroveci pneumonia (PJP)'), ('PNEUMONIA_RECURRENT', 'Pneumonia, recurrent'), ('PROGRESSIVE_MULTILOCAL_LEUKOENCEPHALOPATHY', 'Progressive multifocal leukoencephalopathy'), ('SALMONELLA_SEPTICEMIA_RECURRENT', 'Salmonella septicemia, recurrent'), ('TOXOPLASMOSIS_OF_BRAIN', 'Toxoplasmosis of brain'), ('WASTING_SYNDROME_DUE_TO_HIV', 'Wasting syndrome due to HIV')], max_length=200)),
                ('started', models.DateField()),
                ('stopped', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('ongoing', 'Ongoing'), ('resolved', 'Resolved'), ('resolved_estimated', 'Resolved/Estimated')], default='resolved', max_length=15)),
            ],
            options={
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='OiRecord',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('pending_fields', models.TextField(editable=False, null=True, verbose_name='Pending')),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('no_report', models.BooleanField(default=False, editable=False)),
                ('no_report_datetime', models.DateTimeField(editable=False, null=True)),
                ('dashboard_comment', models.CharField(editable=False, max_length=50, null=True)),
                ('comment', models.TextField(blank=True, help_text='DO NOT include any information that could be used to identify the patient.', max_length=150, null=True)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
            ],
            options={
                'abstract': False,
                'verbose_name': 'Opportunistic Infection',
                'verbose_name_plural': 'Opportunistic Infections',
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Pregnancy',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('pending_fields', models.TextField(editable=False, null=True, verbose_name='Pending')),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('no_report', models.BooleanField(default=False, editable=False)),
                ('no_report_datetime', models.DateTimeField(editable=False, null=True)),
                ('pregnancy_date', models.DateField(blank=True, null=True, verbose_name='Date of first clinical documentation of pregnancy')),
                ('delivery_date', models.DateField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Pregnancy',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='PregnancyHistory',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('pending_fields', models.TextField(editable=False, null=True, verbose_name='Pending')),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('no_report', models.BooleanField(default=False, editable=False)),
                ('no_report_datetime', models.DateTimeField(editable=False, null=True)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('dashboard_comment', models.CharField(editable=False, max_length=50, null=True)),
                ('comment', models.TextField(blank=True, help_text='DO NOT include any information that could be used to identify the patient.', max_length=150, null=True)),
            ],
            options={
                'abstract': False,
                'verbose_name': 'Pregnancy History',
                'verbose_name_plural': 'Pregnancy History',
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='RegisteredSubject',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(editable=False, max_length=50, unique=True, verbose_name='Subject Identifier')),
                ('subject_identifier_as_pk', models.CharField(editable=False, max_length=50, verbose_name='Subject Identifier as pk')),
                ('subject_identifier_aka', models.CharField(editable=False, help_text='track a previously allocated identifier.', max_length=50, null=True, verbose_name='Subject Identifier a.k.a')),
                ('first_name', django_crypto_fields.fields.firstname_field.FirstnameField(help_text=' (Encryption: RSA local)', max_length=71, null=True)),
                ('last_name', django_crypto_fields.fields.lastname_field.LastnameField(help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Last name')),
                ('initials', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[django.core.validators.RegexValidator(message='Ensure initials consist of letters only in upper case, no spaces.', regex='^[A-Z]{2,3}$')])),
                ('dob', models.DateField(help_text='Format is YYYY-MM-DD', null=True, verbose_name='Date of birth')),
                ('is_dob_estimated', edc_base.model.fields.custom_fields.IsDateEstimatedField(choices=[('-', 'No'), ('D', 'Yes, estimated the Day'), ('MD', 'Yes, estimated Month and Day'), ('YMD', 'Yes, estimated Year, Month and Day')], help_text='If the exact date is not known, please indicate which part of the date is estimated.', max_length=25, null=True, verbose_name='Is date of birth estimated?')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=1, null=True, verbose_name='Gender')),
                ('subject_consent_id', models.CharField(blank=True, max_length=100, null=True)),
                ('registration_identifier', models.CharField(blank=True, max_length=36, null=True)),
                ('sid', models.CharField(blank=True, max_length=15, null=True, verbose_name='SID')),
                ('study_site', models.CharField(blank=True, max_length=50, null=True)),
                ('relative_identifier', models.CharField(blank=True, help_text="For example, mother's identifier, if available / appropriate", max_length=25, null=True, verbose_name='Identifier of immediate relation')),
                ('identity', django_crypto_fields.fields.identity_field.IdentityField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True)),
                ('identity_type', edc_base.model.fields.custom_fields.IdentityTypeField(blank=True, choices=[('OMANG', 'Omang'), ('DRIVERS', "Driver's License"), ('PASSPORT', 'Passport'), ('OMANG_RCPT', 'Omang Receipt'), ('OTHER', 'Other')], max_length=15, null=True, verbose_name='What type of identity number is this?')),
                ('screening_identifier', models.CharField(blank=True, max_length=36, null=True)),
                ('screening_datetime', models.DateTimeField(blank=True, null=True)),
                ('screening_age_in_years', models.IntegerField(blank=True, null=True)),
                ('registration_datetime', models.DateTimeField(blank=True, null=True)),
                ('randomization_datetime', models.DateTimeField(blank=True, null=True)),
                ('registration_status', models.CharField(blank=True, max_length=25, null=True, verbose_name='Registration status')),
                ('comment', models.TextField(blank=True, max_length=250, null=True, verbose_name='Comment')),
                ('additional_key', models.CharField(default=None, editable=False, help_text='A uuid (or some other text value) to be added to bypass the unique constraint of just firstname, initials, and dob.The default constraint proves limiting since the source model usually has some otherattribute in additional to first_name, initials and dob which is not captured in this model', max_length=36, null=True, verbose_name='-')),
                ('dm_comment', models.CharField(editable=False, max_length=150, null=True, verbose_name='Data Management comment')),
            ],
        ),
        migrations.CreateModel(
            name='RequisitionMetadata',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(editable=False, max_length=50, verbose_name='Subject Identifier')),
                ('visit_schedule_name', models.CharField(max_length=25)),
                ('schedule_name', models.CharField(max_length=25)),
                ('visit_code', models.CharField(max_length=25)),
                ('model', models.CharField(max_length=50)),
                ('current_entry_title', models.CharField(max_length=250, null=True)),
                ('show_order', models.IntegerField(default=0)),
                ('entry_status', models.CharField(choices=[('REQUIRED', 'New'), ('KEYED', 'Keyed'), ('MISSED', 'Missed'), ('NOT_REQUIRED', 'Not required')], db_index=True, default='REQUIRED', max_length=25)),
                ('due_datetime', models.DateTimeField(blank=True, null=True)),
                ('report_datetime', models.DateTimeField(blank=True, null=True)),
                ('entry_comment', models.TextField(blank=True, max_length=250, null=True)),
                ('close_datetime', models.DateTimeField(blank=True, null=True)),
                ('fill_datetime', models.DateTimeField(blank=True, null=True)),
                ('panel_name', models.CharField(max_length=50, null=True)),
            ],
            options={
                'verbose_name': 'Requisition Metadata',
                'verbose_name_plural': 'Requisition Metadata',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SubjectConsent',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('first_name', django_crypto_fields.fields.firstname_field.FirstnameField(help_text=' (Encryption: RSA local)', max_length=71, null=True)),
                ('last_name', django_crypto_fields.fields.lastname_field.LastnameField(help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Last name')),
                ('initials', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[django.core.validators.RegexValidator(message='Ensure initials consist of letters only in upper case, no spaces.', regex='^[A-Z]{2,3}$')])),
                ('dob', models.DateField(help_text='Format is YYYY-MM-DD', null=True, verbose_name='Date of birth')),
                ('is_dob_estimated', edc_base.model.fields.custom_fields.IsDateEstimatedField(choices=[('-', 'No'), ('D', 'Yes, estimated the Day'), ('MD', 'Yes, estimated Month and Day'), ('YMD', 'Yes, estimated Year, Month and Day')], help_text='If the exact date is not known, please indicate which part of the date is estimated.', max_length=25, null=True, verbose_name='Is date of birth estimated?')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('U', 'Undetermined')], max_length=1, null=True, verbose_name='Gender')),
                ('guardian_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if subject is a minor. Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma then followe by a space. (Encryption: RSA local)", max_length=71, null=True, validators=[edc_consent.validators.FullNameValidator()], verbose_name="Guardian's Last and first name (minors only)")),
                ('subject_type', models.CharField(max_length=25)),
                ('is_verified', models.BooleanField(default=False, editable=False)),
                ('is_verified_datetime', models.DateTimeField(editable=False, null=True)),
                ('verified_by', models.CharField(editable=False, max_length=25, null=True)),
                ('subject_identifier', models.CharField(blank=True, max_length=50, verbose_name='Subject Identifier')),
                ('subject_identifier_as_pk', models.CharField(default=None, editable=False, max_length=50, verbose_name='Subject Identifier as pk')),
                ('subject_identifier_aka', models.CharField(editable=False, help_text='track a previously allocated identifier.', max_length=50, null=True, verbose_name='Subject Identifier a.k.a')),
                ('consent_datetime', models.DateTimeField(validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model.validators.date.datetime_not_future], verbose_name='Consent date and time')),
                ('version', models.CharField(default='?', editable=False, help_text="See 'Consent Type' for consent versions by period.", max_length=10, verbose_name='Consent version')),
                ('study_site', models.CharField(max_length=15, null=True)),
                ('sid', models.CharField(blank=True, help_text='Used for randomization against a prepared rando-list.', max_length=15, null=True, verbose_name='SID')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=250, null=True, verbose_name='Comment')),
                ('dm_comment', models.CharField(editable=False, help_text='see also edc.data manager.', max_length=150, null=True, verbose_name='Data Management comment')),
            ],
            options={
                'get_latest_by': 'consent_datetime',
                'abstract': False,
                'ordering': ('created',),
            },
            bases=(django_crypto_fields.mixins.CryptoMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SubjectRequisition',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('pending_fields', models.TextField(editable=False, null=True, verbose_name='Pending')),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('no_report', models.BooleanField(default=False, editable=False)),
                ('no_report_datetime', models.DateTimeField(editable=False, null=True)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('dashboard_comment', models.CharField(editable=False, max_length=50, null=True)),
                ('comment', models.TextField(blank=True, help_text='DO NOT include any information that could be used to identify the patient.', max_length=150, null=True)),
                ('panel_name', models.CharField(max_length=25)),
                ('requisition_identifier', models.CharField(editable=False, max_length=50, unique=True, verbose_name='Requisition Id')),
                ('requisition_datetime', models.DateTimeField(verbose_name='Requisition Date')),
                ('drawn_datetime', models.DateTimeField(blank=True, help_text='If not drawn, leave blank. Same as date and time of finger prick in case on DBS.', null=True, verbose_name='Date / Time Specimen Drawn')),
                ('is_drawn', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='Yes', help_text='If No, provide a reason below', max_length=3, verbose_name='Was a specimen drawn?')),
                ('reason_not_drawn', models.CharField(blank=True, choices=[('collection_failed', 'Tried, but unable obtaining sample from patient'), ('absent', 'Patient did not attend visit'), ('refused', 'Patient refused'), ('no_supplies', 'No supplies')], max_length=25, null=True, verbose_name='If not drawn, please explain')),
                ('specimen_identifier', models.CharField(editable=False, max_length=50, null=True, unique=True, verbose_name='Specimen Id')),
                ('study_site', models.CharField(max_length=10, null=True)),
                ('clinician_initials', edc_base.model.fields.custom_fields.InitialsField(blank=True, help_text='Type 2-3 letters, all in uppercase and no spaces', max_length=3, null=True, verbose_name='Initials')),
                ('specimen_type', models.CharField(max_length=25, verbose_name='Specimen type')),
                ('item_type', models.CharField(choices=[('tube', 'Tube'), ('swab', 'Swab'), ('dbs', 'DBS Card'), ('other', 'Other')], default='tube', max_length=25, verbose_name='Item collection type')),
                ('item_count', models.IntegerField(default=1, help_text='Number of tubes, samples, cards, etc being sent for this test/order only. Determines number of labels to print', verbose_name='Number of items')),
                ('estimated_volume', models.DecimalField(decimal_places=2, default=5.0, help_text='If applicable, estimated volume of sample for this test/order. This is the total volume if number of "tubes" above is greater than 1', max_digits=7, verbose_name='Estimated volume in mL')),
                ('comments', models.TextField(blank=True, max_length=25, null=True)),
            ],
            options={
                'abstract': False,
                'verbose_name': 'Subject Requisition',
                'verbose_name_plural': 'Subject Laboratory Requisition',
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SubjectVisit',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('visit_schedule_name', models.CharField(editable=False, help_text='the name of the visit schedule used to find the "schedule"', max_length=25, null=True)),
                ('schedule_name', models.CharField(editable=False, help_text='the name of the schedule used to find the list of "visits" to create appointments', max_length=25, null=True)),
                ('visit_code', models.CharField(editable=False, max_length=25, null=True)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text='Date and time of this report', validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model.validators.date.datetime_not_future], verbose_name='Visit Date and Time')),
                ('report_date', models.DateField(editable=False, verbose_name='Visit Date')),
                ('reason', models.CharField(help_text='<Override the field class for this model field attribute in ModelForm>', max_length=25, verbose_name='What is the reason for this visit?')),
                ('study_status', models.CharField(help_text='<Override the field class for this model field attribute in ModelForm>', max_length=50, verbose_name="What is the participant's current study status")),
                ('require_crfs', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='Yes', max_length=10, verbose_name='Are scheduled data being submitted with this visit?')),
                ('reason_missed', models.CharField(blank=True, max_length=35, null=True, verbose_name="If 'missed' above, Reason scheduled visit was missed")),
                ('info_source', models.CharField(max_length=25, verbose_name='What is the main source of this information?')),
                ('info_source_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('survival_status', models.CharField(choices=[('alive', 'Alive'), ('dead', 'Dead'), ('unknown', 'Unknown')], default='alive', max_length=10, null=True, verbose_name="Participant's survival status")),
                ('last_alive_date', models.DateField(blank=True, null=True, validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model.validators.date.date_not_future], verbose_name='Date participant last known alive')),
                ('comments', models.TextField(blank=True, max_length=250, null=True, verbose_name='Comment if any additional pertinent information about the participant')),
                ('subject_identifier', models.CharField(editable=False, help_text='updated automatically', max_length=50, verbose_name='subject_identifier')),
                ('visit_date', models.DateField(validators=[django.core.validators.MinValueValidator(datetime.date(2001, 1, 1)), edc_base.model.validators.date.date_not_future], verbose_name='Visit Date')),
                ('appointment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='ba_namotswe.Appointment')),
            ],
            options={
                'abstract': False,
                'ordering': ('subject_identifier', 'visit_schedule_name', 'schedule_name', 'visit_code', 'visit_date'),
            },
        ),
        migrations.CreateModel(
            name='Tb',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('pending_fields', models.TextField(editable=False, null=True, verbose_name='Pending')),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('no_report', models.BooleanField(default=False, editable=False)),
                ('no_report_datetime', models.DateTimeField(editable=False, null=True)),
                ('dx_date', models.DateField(validators=[edc_base.model.validators.date.date_not_future], verbose_name='Date of diagnosis')),
                ('tb_type', models.CharField(choices=[('PULMONARY TB', 'Pulmonary TB'), ('NON PULMONARY TB', 'Non pulmonary TB'), ('unknown', 'Unknown')], max_length=30, verbose_name='TB type')),
                ('dx_method', models.CharField(choices=[('CULTURE POSITIVE', 'Culture Positive'), ('CXR', 'CXR'), ('OTHER IMAGING MODALITY', 'Other Imaging Modality'), ('CLINICAL DIAGNOSIS', 'Clinical Diagnosis'), ('OTHER', 'Other, describe'), ('unknown', 'Unknown')], max_length=30, verbose_name='Diagnosis method')),
                ('dx_method_other', models.CharField(blank=True, max_length=50, null=True, verbose_name="If 'Other', specify")),
            ],
            options={
                'verbose_name': 'TB History',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='TbRecord',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('pending_fields', models.TextField(editable=False, null=True, verbose_name='Pending')),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('no_report', models.BooleanField(default=False, editable=False)),
                ('no_report_datetime', models.DateTimeField(editable=False, null=True)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('dashboard_comment', models.CharField(editable=False, max_length=50, null=True)),
                ('comment', models.TextField(blank=True, help_text='DO NOT include any information that could be used to identify the patient.', max_length=150, null=True)),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='ba_namotswe.SubjectVisit')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'Tuberculosis Infection History',
                'verbose_name_plural': 'Tuberculosis Infection History',
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Transfer',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('pending_fields', models.TextField(editable=False, null=True, verbose_name='Pending')),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('no_report', models.BooleanField(default=False, editable=False)),
                ('no_report_datetime', models.DateTimeField(editable=False, null=True)),
                ('transfer_date', models.DateField()),
                ('transfer_from', models.CharField(choices=[('idcc', 'IDCC'), ('private', 'Private Clinic'), ('bipai', 'BIPAI'), ('OTHER', 'Other, specify')], max_length=25, verbose_name='From ...')),
                ('transfer_from_other', models.CharField(blank=True, max_length=15, null=True, verbose_name='... from "Other"')),
                ('transfer_to', models.CharField(choices=[('idcc', 'IDCC'), ('private', 'Private Clinic'), ('bipai', 'BIPAI'), ('OTHER', 'Other, specify')], max_length=25, verbose_name='To ...')),
                ('transfer_to_other', models.CharField(blank=True, max_length=15, null=True, verbose_name='... to "Other"')),
                ('reason', models.TextField(blank=True, null=True, verbose_name='Reason')),
            ],
            options={
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='TransferRecord',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('pending_fields', models.TextField(editable=False, null=True, verbose_name='Pending')),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('no_report', models.BooleanField(default=False, editable=False)),
                ('no_report_datetime', models.DateTimeField(editable=False, null=True)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('dashboard_comment', models.CharField(editable=False, max_length=50, null=True)),
                ('comment', models.TextField(blank=True, help_text='DO NOT include any information that could be used to identify the patient.', max_length=150, null=True)),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='ba_namotswe.SubjectVisit')),
            ],
            options={
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='WhoDiagnosis',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('pending_fields', models.TextField(editable=False, null=True, verbose_name='Pending')),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('no_report', models.BooleanField(default=False, editable=False)),
                ('no_report_datetime', models.DateTimeField(editable=False, null=True)),
                ('dx', models.CharField(choices=[('A1', 'Asymptomatic'), ('A2', 'Persistent generalized lymphadenopathy (PGL)'), ('B040', 'Angular cheilitis'), ('B080', 'Fungal nail infections of fingers'), ('B030', 'Herpes zoster'), ('B050', 'Oral ulcerations, recurrent'), ('B060', 'Papular pruritic eruptions'), ('B020', 'Respiratory tract infections, recurrent (RTIs, sinusitis, bronchitis, otitis media, pharyngitis)'), ('B070', 'Seborrhoeic dermatitis'), ('B010', 'Weigh loss, moderate unexplained (<10% of presumed or measured body weight)'), ('B011', 'Weight loss, severe (>10% of presumed or measured body weight)'), ('C090', 'Acute necrotizing ulcerative stomatitis, gingivitis or periodontitis'), ('C100', 'Anaemia, unexplained (<8 g/dl), and or neutropenia (<500/mm3) and or'), ('C070', 'Bacterial infections, severe presumed  (e.g. pneumonia, empyema, pyomyositis, bone or'), ('C020', 'Chronic diarrhoea, unexplained, (for longer than one month)'), ('C080', 'Joint infection, meningitis, bacteraemia'), ('C040', 'Oral candidiasis'), ('C050', 'Oral hairy leukoplakia'), ('C030', 'Persistent fever, unexplained (intermittent or constant for longer than one month)'), ('C060', 'Pulmonary tuberculosis (TB) diagnosed in last two years'), ('C110', 'Thrombocytopenia (<50 000/ mm3) for more than one month'), ('D080', 'Central nervous system (CNS) toxoplasmosis'), ('D040', 'Chronic herpes simplex infection (orolabial, genital or anorectal of more than one month’s duration)'), ('D060', 'Extrapulmonary TB'), ('D090', 'HIV encephalopathy'), ('D010', 'HIV wasting syndrome'), ('D070', 'Kaposi’s sarcoma'), ('D050', 'Oesophageal candidiasis'), ('D020', 'Pneumocystis pneumonia'), ('D030', 'Recurrent severe or radiological bacterial pneumonia'), ('E190', 'Any disseminated mycosis (e.g. histoplasmosis, coccidiomycosis, penicilliosis)'), ('E140', 'Candida of trachea, bronchi or lungs'), ('E150', 'Cryptosporidiosis'), ('E180', 'Cytomegalovirus (CMV) infection (retinitis or of an organ other than liver, spleen or lymph nodes)'), ('E120', 'Disseminated non-tuberculous mycobacteria infection'), ('E110', 'Extrapulmonary cryptococcosis including meningitis'), ('E220', 'Invasive cervical carcinoma'), ('E160', 'Isosporiasis'), ('E210', 'Lymphoma (cerebral or B cell non-Hodgkin)'), ('E130', 'Progressive multifocal leukoencephalopathy (PML)'), ('E200', 'Recurrent non-typhoidal salmonella septicaemia'), ('E170', 'Visceral herpes simplex infection'), ('E230', 'Visceral leishmaniasis')], max_length=200)),
                ('dx_date', models.DateField(blank=True, help_text='Provide if known', null=True)),
            ],
            options={
                'verbose_name': 'WHO Diagnosis',
                'verbose_name_plural': 'WHO Diagnosis',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='WhoStaging',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('pending_fields', models.TextField(editable=False, null=True, verbose_name='Pending')),
                ('edited', models.BooleanField(default=False, editable=False)),
                ('flagged', models.BooleanField(default=False, editable=False)),
                ('flagged_datetime', models.DateTimeField(editable=False, null=True)),
                ('reviewed', models.BooleanField(default=False, editable=False)),
                ('reviewed_datetime', models.DateTimeField(editable=False, null=True)),
                ('no_report', models.BooleanField(default=False, editable=False)),
                ('no_report_datetime', models.DateTimeField(editable=False, null=True)),
                ('dashboard_comment', models.CharField(editable=False, max_length=50, null=True)),
                ('comment', models.TextField(blank=True, help_text='DO NOT include any information that could be used to identify the patient.', max_length=150, null=True)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('who_stage', models.CharField(choices=[('I', 'Stage I'), ('II', 'Stage II'), ('III', 'Stage III'), ('IV', 'Stage IV'), ('unknown', 'Unknown')], default='unknown', max_length=25, verbose_name='WHO stage')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='ba_namotswe.SubjectVisit')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'WHO Staging',
                'verbose_name_plural': 'WHO Staging',
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.AddField(
            model_name='whodiagnosis',
            name='who_staging',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ba_namotswe.WhoStaging'),
        ),
        migrations.AddField(
            model_name='transfer',
            name='transfer_record',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ba_namotswe.TransferRecord'),
        ),
        migrations.AddField(
            model_name='tb',
            name='tb_record',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ba_namotswe.TbRecord'),
        ),
        migrations.AddField(
            model_name='subjectrequisition',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='ba_namotswe.SubjectVisit'),
        ),
        migrations.AlterUniqueTogether(
            name='subjectconsent',
            unique_together=set([('first_name', 'dob', 'initials', 'version')]),
        ),
        migrations.AlterUniqueTogether(
            name='requisitionmetadata',
            unique_together=set([('subject_identifier', 'visit_schedule_name', 'schedule_name', 'visit_code', 'model', 'panel_name')]),
        ),
        migrations.AddField(
            model_name='pregnancyhistory',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='ba_namotswe.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='pregnancy',
            name='pregnancy_history',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ba_namotswe.PregnancyHistory'),
        ),
        migrations.AddField(
            model_name='oirecord',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='ba_namotswe.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='oi',
            name='oi_record',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ba_namotswe.OiRecord'),
        ),
        migrations.AddField(
            model_name='labrecord',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='ba_namotswe.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='incare',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='ba_namotswe.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalwhostaging',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ba_namotswe.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalwhodiagnosis',
            name='who_staging',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ba_namotswe.WhoStaging'),
        ),
        migrations.AddField(
            model_name='historicaltransferrecord',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ba_namotswe.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicaltransfer',
            name='transfer_record',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ba_namotswe.TransferRecord'),
        ),
        migrations.AddField(
            model_name='historicaltbrecord',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ba_namotswe.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicaltb',
            name='tb_record',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ba_namotswe.TbRecord'),
        ),
        migrations.AddField(
            model_name='historicalsubjectrequisition',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ba_namotswe.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalpregnancyhistory',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ba_namotswe.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalpregnancy',
            name='pregnancy_history',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ba_namotswe.PregnancyHistory'),
        ),
        migrations.AddField(
            model_name='historicaloirecord',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ba_namotswe.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicaloi',
            name='oi_record',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ba_namotswe.OiRecord'),
        ),
        migrations.AddField(
            model_name='historicallabtest',
            name='lab_record',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ba_namotswe.LabRecord'),
        ),
        migrations.AddField(
            model_name='historicallabrecord',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ba_namotswe.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalincare',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ba_namotswe.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalentrytocare',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ba_namotswe.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalartrecord',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ba_namotswe.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicaladherencecounselling',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ba_namotswe.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='entrytocare',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='ba_namotswe.SubjectVisit'),
        ),
        migrations.AlterUniqueTogether(
            name='crfmetadata',
            unique_together=set([('subject_identifier', 'visit_schedule_name', 'schedule_name', 'visit_code', 'model')]),
        ),
        migrations.AddField(
            model_name='artrecord',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='ba_namotswe.SubjectVisit'),
        ),
        migrations.AlterUniqueTogether(
            name='appointment',
            unique_together=set([('subject_identifier', 'visit_schedule_name', 'schedule_name', 'visit_code', 'visit_code_sequence')]),
        ),
        migrations.AddField(
            model_name='adherencecounselling',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='ba_namotswe.SubjectVisit'),
        ),
        migrations.AlterUniqueTogether(
            name='whodiagnosis',
            unique_together=set([('who_staging', 'dx', 'dx_date')]),
        ),
        migrations.AlterUniqueTogether(
            name='subjectvisit',
            unique_together=set([('subject_identifier', 'visit_schedule_name', 'schedule_name', 'visit_code'), ('subject_identifier', 'visit_schedule_name', 'schedule_name', 'visit_date')]),
        ),
        migrations.AlterUniqueTogether(
            name='labtest',
            unique_together=set([('lab_record', 'utest_id', 'test_date')]),
        ),
    ]
